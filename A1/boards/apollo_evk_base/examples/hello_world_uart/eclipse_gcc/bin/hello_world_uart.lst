
bin/hello_world_uart.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 02 00 10 dd 0e 00 00 41 0f 00 00 51 02 00 00     ........A...Q...
	...
      18:	49 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     I...............
      28:	00 00 00 00 49 0f 00 00 49 0f 00 00 00 00 00 00     ....I...I.......
      38:	49 0f 00 00 49 0f 00 00 49 0f 00 00 49 0f 00 00     I...I...I...I...
      48:	49 0f 00 00 49 0f 00 00 49 0f 00 00 49 0f 00 00     I...I...I...I...
      58:	49 0f 00 00 49 0f 00 00 49 0f 00 00 49 0f 00 00     I...I...I...I...
      68:	49 0f 00 00 49 0f 00 00 49 0f 00 00 49 0f 00 00     I...I...I...I...
      78:	49 0f 00 00 49 0f 00 00                             I...I...

00000080 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(void)
{
      80:	b580      	push	{r7, lr}
      82:	af00      	add	r7, sp, #0
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
      84:	4b1a      	ldr	r3, [pc, #104]	; (f0 <uart_init+0x70>)
      86:	2273      	movs	r2, #115	; 0x73
      88:	601a      	str	r2, [r3, #0]
      8a:	4b1a      	ldr	r3, [pc, #104]	; (f4 <uart_init+0x74>)
      8c:	4a19      	ldr	r2, [pc, #100]	; (f4 <uart_init+0x74>)
      8e:	6812      	ldr	r2, [r2, #0]
      90:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
      94:	601a      	str	r2, [r3, #0]
      96:	4b18      	ldr	r3, [pc, #96]	; (f8 <uart_init+0x78>)
      98:	4a17      	ldr	r2, [pc, #92]	; (f8 <uart_init+0x78>)
      9a:	6812      	ldr	r2, [r2, #0]
      9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
      a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
      a4:	601a      	str	r2, [r3, #0]
      a6:	4b12      	ldr	r3, [pc, #72]	; (f0 <uart_init+0x70>)
      a8:	2200      	movs	r2, #0
      aa:	601a      	str	r2, [r3, #0]
    am_bsp_pin_enable(COM_UART_RX);
      ac:	4b10      	ldr	r3, [pc, #64]	; (f0 <uart_init+0x70>)
      ae:	2273      	movs	r2, #115	; 0x73
      b0:	601a      	str	r2, [r3, #0]
      b2:	4b10      	ldr	r3, [pc, #64]	; (f4 <uart_init+0x74>)
      b4:	4a0f      	ldr	r2, [pc, #60]	; (f4 <uart_init+0x74>)
      b6:	6812      	ldr	r2, [r2, #0]
      b8:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
      bc:	601a      	str	r2, [r3, #0]
      be:	4b0f      	ldr	r3, [pc, #60]	; (fc <uart_init+0x7c>)
      c0:	4a0e      	ldr	r2, [pc, #56]	; (fc <uart_init+0x7c>)
      c2:	6812      	ldr	r2, [r2, #0]
      c4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
      c8:	f042 0212 	orr.w	r2, r2, #18
      cc:	601a      	str	r2, [r3, #0]
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <uart_init+0x70>)
      d0:	2200      	movs	r2, #0
      d2:	601a      	str	r2, [r3, #0]

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable();
      d4:	f001 f83c 	bl	1150 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable();
      d8:	f001 f830 	bl	113c <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(&g_sUartConfig);
      dc:	4808      	ldr	r0, [pc, #32]	; (100 <uart_init+0x80>)
      de:	f000 ffe7 	bl	10b0 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
      e2:	2012      	movs	r0, #18
      e4:	f001 f858 	bl	1198 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable();
      e8:	f001 f81e 	bl	1128 <am_hal_uart_enable>
}
      ec:	bd80      	pop	{r7, pc}
      ee:	bf00      	nop
      f0:	40010060 	.word	0x40010060
      f4:	40010050 	.word	0x40010050
      f8:	40010020 	.word	0x40010020
      fc:	40010024 	.word	0x40010024
     100:	10000200 	.word	0x10000200

00000104 <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(void)
{
     104:	b580      	push	{r7, lr}
     106:	af00      	add	r7, sp, #0
      //
      // Clear all interrupts before sleeping as having a pending UART interrupt
      // burns power.
      //
      am_hal_uart_int_clear(0xFFFFFFFF);
     108:	f04f 30ff 	mov.w	r0, #4294967295
     10c:	f001 f806 	bl	111c <am_hal_uart_int_clear>

      //
      // Disable the UART.
      //
      am_hal_uart_disable();
     110:	f001 f814 	bl	113c <am_hal_uart_disable>

      //
      // Disable the UART pins.
      //
      am_bsp_pin_disable(COM_UART_TX);
     114:	4b15      	ldr	r3, [pc, #84]	; (16c <uart_disable+0x68>)
     116:	2273      	movs	r2, #115	; 0x73
     118:	601a      	str	r2, [r3, #0]
     11a:	4b15      	ldr	r3, [pc, #84]	; (170 <uart_disable+0x6c>)
     11c:	4a14      	ldr	r2, [pc, #80]	; (170 <uart_disable+0x6c>)
     11e:	6812      	ldr	r2, [r2, #0]
     120:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
     124:	601a      	str	r2, [r3, #0]
     126:	4b13      	ldr	r3, [pc, #76]	; (174 <uart_disable+0x70>)
     128:	4a12      	ldr	r2, [pc, #72]	; (174 <uart_disable+0x70>)
     12a:	6812      	ldr	r2, [r2, #0]
     12c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     130:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
     134:	601a      	str	r2, [r3, #0]
     136:	4b0d      	ldr	r3, [pc, #52]	; (16c <uart_disable+0x68>)
     138:	2200      	movs	r2, #0
     13a:	601a      	str	r2, [r3, #0]
      am_bsp_pin_disable(COM_UART_RX);
     13c:	4b0b      	ldr	r3, [pc, #44]	; (16c <uart_disable+0x68>)
     13e:	2273      	movs	r2, #115	; 0x73
     140:	601a      	str	r2, [r3, #0]
     142:	4b0b      	ldr	r3, [pc, #44]	; (170 <uart_disable+0x6c>)
     144:	4a0a      	ldr	r2, [pc, #40]	; (170 <uart_disable+0x6c>)
     146:	6812      	ldr	r2, [r2, #0]
     148:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
     14c:	601a      	str	r2, [r3, #0]
     14e:	4b0a      	ldr	r3, [pc, #40]	; (178 <uart_disable+0x74>)
     150:	4a09      	ldr	r2, [pc, #36]	; (178 <uart_disable+0x74>)
     152:	6812      	ldr	r2, [r2, #0]
     154:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
     158:	f042 0218 	orr.w	r2, r2, #24
     15c:	601a      	str	r2, [r3, #0]
     15e:	4b03      	ldr	r3, [pc, #12]	; (16c <uart_disable+0x68>)
     160:	2200      	movs	r2, #0
     162:	601a      	str	r2, [r3, #0]

      //
      // Disable the UART clock.
      //
      am_hal_uart_clock_disable();
     164:	f001 f808 	bl	1178 <am_hal_uart_clock_disable>
}
     168:	bd80      	pop	{r7, pc}
     16a:	bf00      	nop
     16c:	40010060 	.word	0x40010060
     170:	40010050 	.word	0x40010050
     174:	40010020 	.word	0x40010020
     178:	40010024 	.word	0x40010024

0000017c <uart_transmit_delay>:
// for a transmission to fully complete before proceeding.
//
//*****************************************************************************
void
uart_transmit_delay(void)
{
     17c:	b580      	push	{r7, lr}
     17e:	af00      	add	r7, sp, #0
  //
  // Wait until busy bit clears to make sure UART fully transmitted last byte
  //
  while ( am_hal_uart_flags_get() & AM_HAL_UART_FR_BUSY );
     180:	bf00      	nop
     182:	f001 f815 	bl	11b0 <am_hal_uart_flags_get>
     186:	4603      	mov	r3, r0
     188:	f003 0308 	and.w	r3, r3, #8
     18c:	2b00      	cmp	r3, #0
     18e:	d1f8      	bne.n	182 <uart_transmit_delay+0x6>
}
     190:	bd80      	pop	{r7, pc}
     192:	bf00      	nop

00000194 <uart_test_read>:
// Read from the UART
//
//*****************************************************************************
void
uart_test_read(void)
{
     194:	b580      	push	{r7, lr}
     196:	b082      	sub	sp, #8
     198:	af00      	add	r7, sp, #0
   char xx[2];
   uint32_t i=2;
     19a:	2302      	movs	r3, #2
     19c:	607b      	str	r3, [r7, #4]

   am_hal_uart_line_receive_polled(i, &xx[0]);
     19e:	463b      	mov	r3, r7
     1a0:	6878      	ldr	r0, [r7, #4]
     1a2:	4619      	mov	r1, r3
     1a4:	f001 f81e 	bl	11e4 <am_hal_uart_line_receive_polled>
   am_util_stdio_printf("Val: %c\n", xx[0]);
     1a8:	783b      	ldrb	r3, [r7, #0]
     1aa:	4803      	ldr	r0, [pc, #12]	; (1b8 <uart_test_read+0x24>)
     1ac:	4619      	mov	r1, r3
     1ae:	f000 fe77 	bl	ea0 <am_util_stdio_printf>
}
     1b2:	3708      	adds	r7, #8
     1b4:	46bd      	mov	sp, r7
     1b6:	bd80      	pop	{r7, pc}
     1b8:	000012d0 	.word	0x000012d0

000001bc <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b086      	sub	sp, #24
     1c0:	af00      	add	r7, sp, #0
    am_hal_mcuctrl_device_t  mcu_dev;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     1c2:	2000      	movs	r0, #0
     1c4:	f000 fed8 	bl	f78 <am_hal_clkgen_sysclk_select>

    //
    // Initialize the BSP.
    //
    am_bsp_low_power_init();
     1c8:	f000 fec2 	bl	f50 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)
     1cc:	4819      	ldr	r0, [pc, #100]	; (234 <main+0x78>)
     1ce:	f000 f8af 	bl	330 <am_util_stdio_printf_init>
      am_hal_uart_string_transmit_polled);

    //
    // Configure and enable the UART.
    //
    uart_init();
     1d2:	f7ff ff55 	bl	80 <uart_init>

    //
    // Print the banner.
    //
    am_util_stdio_printf("Hello World UART!\n\n");
     1d6:	4818      	ldr	r0, [pc, #96]	; (238 <main+0x7c>)
     1d8:	f000 fe62 	bl	ea0 <am_util_stdio_printf>
    uart_transmit_delay();
     1dc:	f7ff ffce 	bl	17c <uart_transmit_delay>

    //
    // Print the device info.
    //
    am_hal_mcuctrl_device_info_get(&mcu_dev);
     1e0:	463b      	mov	r3, r7
     1e2:	4618      	mov	r0, r3
     1e4:	f000 feec 	bl	fc0 <am_hal_mcuctrl_device_info_get>
    am_util_stdio_printf("Device Info:\n\tPart number: 0x%08X\n"
     1e8:	683a      	ldr	r2, [r7, #0]
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	4813      	ldr	r0, [pc, #76]	; (23c <main+0x80>)
     1ee:	4611      	mov	r1, r2
     1f0:	461a      	mov	r2, r3
     1f2:	f000 fe55 	bl	ea0 <am_util_stdio_printf>
                         "\tRevision: 0x%X\n",
                         mcu_dev.ui32ChipPN, mcu_dev.ui32ChipRev);
    uart_transmit_delay();
     1f6:	f7ff ffc1 	bl	17c <uart_transmit_delay>
    am_util_stdio_printf("\tFlash size = %d\n", mcu_dev.ui32FlashSize);
     1fa:	693b      	ldr	r3, [r7, #16]
     1fc:	4810      	ldr	r0, [pc, #64]	; (240 <main+0x84>)
     1fe:	4619      	mov	r1, r3
     200:	f000 fe4e 	bl	ea0 <am_util_stdio_printf>
    uart_transmit_delay();
     204:	f7ff ffba 	bl	17c <uart_transmit_delay>
    am_util_stdio_printf("\tSRAM size = %d\n\n", mcu_dev.ui32SRAMSize);
     208:	697b      	ldr	r3, [r7, #20]
     20a:	480e      	ldr	r0, [pc, #56]	; (244 <main+0x88>)
     20c:	4619      	mov	r1, r3
     20e:	f000 fe47 	bl	ea0 <am_util_stdio_printf>
    uart_transmit_delay();
     212:	f7ff ffb3 	bl	17c <uart_transmit_delay>


    //
    // Print the compiler version.
    //
    am_util_stdio_printf("Compiler: %s\n", COMPILER_VERSION);
     216:	480c      	ldr	r0, [pc, #48]	; (248 <main+0x8c>)
     218:	490c      	ldr	r1, [pc, #48]	; (24c <main+0x90>)
     21a:	f000 fe41 	bl	ea0 <am_util_stdio_printf>
    uart_transmit_delay();
     21e:	f7ff ffad 	bl	17c <uart_transmit_delay>

    // test reading from uart
    uart_test_read();
     222:	f7ff ffb7 	bl	194 <uart_test_read>
    //
    // We are done printing.
    // Disable the UART and interrupts
    //     

    uart_disable();
     226:	f7ff ff6d 	bl	104 <uart_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     22a:	2001      	movs	r0, #1
     22c:	f000 ff26 	bl	107c <am_hal_sysctrl_sleep>
    }
     230:	e7fb      	b.n	22a <main+0x6e>
     232:	bf00      	nop
     234:	000011bd 	.word	0x000011bd
     238:	000012dc 	.word	0x000012dc
     23c:	000012f0 	.word	0x000012f0
     240:	00001324 	.word	0x00001324
     244:	00001338 	.word	0x00001338
     248:	0000134c 	.word	0x0000134c
     24c:	0000135c 	.word	0x0000135c

00000250 <am_fault_isr>:
//*****************************************************************************
#if defined(gcc)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     250:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     252:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     254:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     256:	f000 f809 	bl	26c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     25a:	bd01      	pop	{r0, pc}
}
     25c:	4618      	mov	r0, r3
     25e:	bf00      	nop

00000260 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     260:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     262:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     264:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     266:	4770      	bx	lr
}
     268:	4618      	mov	r0, r3
     26a:	bf00      	nop

0000026c <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     26c:	b580      	push	{r7, lr}
     26e:	b090      	sub	sp, #64	; 0x40
     270:	af00      	add	r7, sp, #0
     272:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    uint32_t u32Mask = 0;
     274:	2300      	movs	r3, #0
     276:	63fb      	str	r3, [r7, #60]	; 0x3c
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     27a:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     27c:	4b2a      	ldr	r3, [pc, #168]	; (328 <am_util_faultisr_collect_data+0xbc>)
     27e:	681b      	ldr	r3, [r3, #0]
     280:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     284:	b2db      	uxtb	r3, r3
     286:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     28c:	0a1b      	lsrs	r3, r3, #8
     28e:	b2db      	uxtb	r3, r3
     290:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     296:	0c1b      	lsrs	r3, r3, #16
     298:	b29b      	uxth	r3, r3
     29a:	877b      	strh	r3, [r7, #58]	; 0x3a

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     29c:	4b23      	ldr	r3, [pc, #140]	; (32c <am_util_faultisr_collect_data+0xc0>)
     29e:	681b      	ldr	r3, [r3, #0]
     2a0:	633b      	str	r3, [r7, #48]	; 0x30

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     2a2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
     2a6:	b2db      	uxtb	r3, r3
     2a8:	f003 0302 	and.w	r3, r3, #2
     2ac:	2b00      	cmp	r3, #0
     2ae:	d005      	beq.n	2bc <am_util_faultisr_collect_data+0x50>
     2b0:	2006      	movs	r0, #6
     2b2:	6879      	ldr	r1, [r7, #4]
     2b4:	f7ff ffd4 	bl	260 <getStackedReg>
     2b8:	4603      	mov	r3, r0
     2ba:	e001      	b.n	2c0 <am_util_faultisr_collect_data+0x54>
     2bc:	f04f 33ff 	mov.w	r3, #4294967295
     2c0:	62fb      	str	r3, [r7, #44]	; 0x2c

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     2c2:	2000      	movs	r0, #0
     2c4:	6879      	ldr	r1, [r7, #4]
     2c6:	f7ff ffcb 	bl	260 <getStackedReg>
     2ca:	4603      	mov	r3, r0
     2cc:	60fb      	str	r3, [r7, #12]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     2ce:	2001      	movs	r0, #1
     2d0:	6879      	ldr	r1, [r7, #4]
     2d2:	f7ff ffc5 	bl	260 <getStackedReg>
     2d6:	4603      	mov	r3, r0
     2d8:	613b      	str	r3, [r7, #16]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     2da:	2002      	movs	r0, #2
     2dc:	6879      	ldr	r1, [r7, #4]
     2de:	f7ff ffbf 	bl	260 <getStackedReg>
     2e2:	4603      	mov	r3, r0
     2e4:	617b      	str	r3, [r7, #20]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     2e6:	2003      	movs	r0, #3
     2e8:	6879      	ldr	r1, [r7, #4]
     2ea:	f7ff ffb9 	bl	260 <getStackedReg>
     2ee:	4603      	mov	r3, r0
     2f0:	61bb      	str	r3, [r7, #24]
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     2f2:	2004      	movs	r0, #4
     2f4:	6879      	ldr	r1, [r7, #4]
     2f6:	f7ff ffb3 	bl	260 <getStackedReg>
     2fa:	4603      	mov	r3, r0
     2fc:	61fb      	str	r3, [r7, #28]
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     2fe:	2005      	movs	r0, #5
     300:	6879      	ldr	r1, [r7, #4]
     302:	f7ff ffad 	bl	260 <getStackedReg>
     306:	4603      	mov	r3, r0
     308:	623b      	str	r3, [r7, #32]
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     30a:	2006      	movs	r0, #6
     30c:	6879      	ldr	r1, [r7, #4]
     30e:	f7ff ffa7 	bl	260 <getStackedReg>
     312:	4603      	mov	r3, r0
     314:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     316:	2007      	movs	r0, #7
     318:	6879      	ldr	r1, [r7, #4]
     31a:	f7ff ffa1 	bl	260 <getStackedReg>
     31e:	4603      	mov	r3, r0
     320:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        u32Mask >>= 1;
    }
#endif

    u32Mask = 0;
     322:	2300      	movs	r3, #0
     324:	63fb      	str	r3, [r7, #60]	; 0x3c
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
     326:	e7fe      	b.n	326 <am_util_faultisr_collect_data+0xba>
     328:	e000ed28 	.word	0xe000ed28
     32c:	e000ed38 	.word	0xe000ed38

00000330 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     330:	b480      	push	{r7}
     332:	b083      	sub	sp, #12
     334:	af00      	add	r7, sp, #0
     336:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     338:	4b03      	ldr	r3, [pc, #12]	; (348 <am_util_stdio_printf_init+0x18>)
     33a:	687a      	ldr	r2, [r7, #4]
     33c:	601a      	str	r2, [r3, #0]
}
     33e:	370c      	adds	r7, #12
     340:	46bd      	mov	sp, r7
     342:	f85d 7b04 	ldr.w	r7, [sp], #4
     346:	4770      	bx	lr
     348:	10000318 	.word	0x10000318

0000034c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     34c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
     350:	b097      	sub	sp, #92	; 0x5c
     352:	af00      	add	r7, sp, #0
     354:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     358:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     35c:	001c      	movs	r4, r3
     35e:	2500      	movs	r5, #0
     360:	ea54 0005 	orrs.w	r0, r4, r5
     364:	f000 8094 	beq.w	490 <divu64_10+0x144>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     368:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     36c:	0859      	lsrs	r1, r3, #1
     36e:	ea4f 0032 	mov.w	r0, r2, rrx
     372:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     376:	ea4f 0892 	mov.w	r8, r2, lsr #2
     37a:	ea48 7883 	orr.w	r8, r8, r3, lsl #30
     37e:	ea4f 0993 	mov.w	r9, r3, lsr #2
     382:	eb10 0208 	adds.w	r2, r0, r8
     386:	eb41 0309 	adc.w	r3, r1, r9
     38a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     38e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     392:	ea4f 1a12 	mov.w	sl, r2, lsr #4
     396:	ea4a 7a03 	orr.w	sl, sl, r3, lsl #28
     39a:	ea4f 1b13 	mov.w	fp, r3, lsr #4
     39e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     3a2:	eb12 020a 	adds.w	r2, r2, sl
     3a6:	eb43 030b 	adc.w	r3, r3, fp
     3aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     3ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     3b2:	0a11      	lsrs	r1, r2, #8
     3b4:	62b9      	str	r1, [r7, #40]	; 0x28
     3b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     3b8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
     3bc:	62b8      	str	r0, [r7, #40]	; 0x28
     3be:	0a19      	lsrs	r1, r3, #8
     3c0:	62f9      	str	r1, [r7, #44]	; 0x2c
     3c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     3c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
     3ca:	1812      	adds	r2, r2, r0
     3cc:	eb43 0301 	adc.w	r3, r3, r1
     3d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     3d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     3d8:	0c11      	lsrs	r1, r2, #16
     3da:	6239      	str	r1, [r7, #32]
     3dc:	6a38      	ldr	r0, [r7, #32]
     3de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     3e2:	6238      	str	r0, [r7, #32]
     3e4:	0c19      	lsrs	r1, r3, #16
     3e6:	6279      	str	r1, [r7, #36]	; 0x24
     3e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     3ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
     3f0:	1812      	adds	r2, r2, r0
     3f2:	eb43 0301 	adc.w	r3, r3, r1
     3f6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     3fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     3fe:	0019      	movs	r1, r3
     400:	61b9      	str	r1, [r7, #24]
     402:	2200      	movs	r2, #0
     404:	61fa      	str	r2, [r7, #28]
     406:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     40a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
     40e:	1812      	adds	r2, r2, r0
     410:	eb43 0301 	adc.w	r3, r3, r1
     414:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 >>= 3;
     418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     41c:	08d1      	lsrs	r1, r2, #3
     41e:	60b9      	str	r1, [r7, #8]
     420:	68b8      	ldr	r0, [r7, #8]
     422:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
     426:	60b8      	str	r0, [r7, #8]
     428:	08d9      	lsrs	r1, r3, #3
     42a:	60f9      	str	r1, [r7, #12]
     42c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     430:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     438:	1892      	adds	r2, r2, r2
     43a:	eb43 0303 	adc.w	r3, r3, r3
     43e:	0098      	lsls	r0, r3, #2
     440:	6078      	str	r0, [r7, #4]
     442:	6879      	ldr	r1, [r7, #4]
     444:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
     448:	6079      	str	r1, [r7, #4]
     44a:	0090      	lsls	r0, r2, #2
     44c:	6038      	str	r0, [r7, #0]
     44e:	e9d7 0100 	ldrd	r0, r1, [r7]
     452:	1812      	adds	r2, r2, r0
     454:	eb43 0301 	adc.w	r3, r3, r1
     458:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
     45c:	1a82      	subs	r2, r0, r2
     45e:	eb61 0303 	sbc.w	r3, r1, r3
     462:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     466:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
     46a:	3206      	adds	r2, #6
     46c:	f143 0300 	adc.w	r3, r3, #0
     470:	0911      	lsrs	r1, r2, #4
     472:	6139      	str	r1, [r7, #16]
     474:	6938      	ldr	r0, [r7, #16]
     476:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
     47a:	6138      	str	r0, [r7, #16]
     47c:	0919      	lsrs	r1, r3, #4
     47e:	6179      	str	r1, [r7, #20]
     480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     484:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
     488:	1812      	adds	r2, r2, r0
     48a:	eb43 0301 	adc.w	r3, r3, r1
     48e:	e029      	b.n	4e4 <divu64_10+0x198>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     492:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     496:	085a      	lsrs	r2, r3, #1
     498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     49a:	089b      	lsrs	r3, r3, #2
     49c:	4413      	add	r3, r2
     49e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     4a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     4a2:	091b      	lsrs	r3, r3, #4
     4a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     4a6:	4413      	add	r3, r2
     4a8:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     4ac:	0a1b      	lsrs	r3, r3, #8
     4ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     4b0:	4413      	add	r3, r2
     4b2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     4b6:	0c1b      	lsrs	r3, r3, #16
     4b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     4ba:	4413      	add	r3, r2
     4bc:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     4be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     4c0:	08db      	lsrs	r3, r3, #3
     4c2:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     4c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     4c6:	4613      	mov	r3, r2
     4c8:	009b      	lsls	r3, r3, #2
     4ca:	4413      	add	r3, r2
     4cc:	005b      	lsls	r3, r3, #1
     4ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
     4d0:	1ad3      	subs	r3, r2, r3
     4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     4d6:	3306      	adds	r3, #6
     4d8:	091a      	lsrs	r2, r3, #4
     4da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     4dc:	4413      	add	r3, r2
     4de:	461a      	mov	r2, r3
     4e0:	f04f 0300 	mov.w	r3, #0
    }
}
     4e4:	4610      	mov	r0, r2
     4e6:	4619      	mov	r1, r3
     4e8:	375c      	adds	r7, #92	; 0x5c
     4ea:	46bd      	mov	sp, r7
     4ec:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
     4f0:	4770      	bx	lr
     4f2:	bf00      	nop

000004f4 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     4f4:	b580      	push	{r7, lr}
     4f6:	b084      	sub	sp, #16
     4f8:	af00      	add	r7, sp, #0
     4fa:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     4fe:	683a      	ldr	r2, [r7, #0]
     500:	687b      	ldr	r3, [r7, #4]
     502:	4313      	orrs	r3, r2
     504:	2b00      	cmp	r3, #0
     506:	bf14      	ite	ne
     508:	2300      	movne	r3, #0
     50a:	2301      	moveq	r3, #1
     50c:	b2db      	uxtb	r3, r3
     50e:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     510:	e008      	b.n	524 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     512:	e9d7 0100 	ldrd	r0, r1, [r7]
     516:	f7ff ff19 	bl	34c <divu64_10>
     51a:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     51e:	68fb      	ldr	r3, [r7, #12]
     520:	3301      	adds	r3, #1
     522:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     524:	e9d7 2300 	ldrd	r2, r3, [r7]
     528:	ea52 0103 	orrs.w	r1, r2, r3
     52c:	d1f1      	bne.n	512 <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
     52e:	68fb      	ldr	r3, [r7, #12]
}
     530:	4618      	mov	r0, r3
     532:	3710      	adds	r7, #16
     534:	46bd      	mov	sp, r7
     536:	bd80      	pop	{r7, pc}

00000538 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     538:	b580      	push	{r7, lr}
     53a:	b082      	sub	sp, #8
     53c:	af00      	add	r7, sp, #0
     53e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     542:	e9d7 2300 	ldrd	r2, r3, [r7]
     546:	2a00      	cmp	r2, #0
     548:	f173 0100 	sbcs.w	r1, r3, #0
     54c:	da06      	bge.n	55c <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     54e:	e9d7 2300 	ldrd	r2, r3, [r7]
     552:	4252      	negs	r2, r2
     554:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     558:	e9c7 2300 	strd	r2, r3, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
     55c:	e9d7 2300 	ldrd	r2, r3, [r7]
     560:	4610      	mov	r0, r2
     562:	4619      	mov	r1, r3
     564:	f7ff ffc6 	bl	4f4 <ndigits_in_u64>
     568:	4603      	mov	r3, r0
}
     56a:	4618      	mov	r0, r3
     56c:	3708      	adds	r7, #8
     56e:	46bd      	mov	sp, r7
     570:	bd80      	pop	{r7, pc}
     572:	bf00      	nop

00000574 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     574:	b480      	push	{r7}
     576:	b085      	sub	sp, #20
     578:	af00      	add	r7, sp, #0
     57a:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     57e:	6838      	ldr	r0, [r7, #0]
     580:	6879      	ldr	r1, [r7, #4]
     582:	4301      	orrs	r1, r0
     584:	2900      	cmp	r1, #0
     586:	bf14      	ite	ne
     588:	2100      	movne	r1, #0
     58a:	2101      	moveq	r1, #1
     58c:	b2c9      	uxtb	r1, r1
     58e:	60f9      	str	r1, [r7, #12]

    while ( ui64Val )
     590:	e00a      	b.n	5a8 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     592:	e9d7 0100 	ldrd	r0, r1, [r7]
     596:	0902      	lsrs	r2, r0, #4
     598:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
     59c:	090b      	lsrs	r3, r1, #4
     59e:	e9c7 2300 	strd	r2, r3, [r7]
        ++iDigits;
     5a2:	68f9      	ldr	r1, [r7, #12]
     5a4:	3101      	adds	r1, #1
     5a6:	60f9      	str	r1, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
     5a8:	e9d7 0100 	ldrd	r0, r1, [r7]
     5ac:	ea50 0c01 	orrs.w	ip, r0, r1
     5b0:	d1ef      	bne.n	592 <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
     5b2:	68fb      	ldr	r3, [r7, #12]
}
     5b4:	4618      	mov	r0, r3
     5b6:	3714      	adds	r7, #20
     5b8:	46bd      	mov	sp, r7
     5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
     5be:	4770      	bx	lr

000005c0 <decstr_to_u>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_u(const char *pcStr, uint32_t *pui32CharCnt)
{
     5c0:	b480      	push	{r7}
     5c2:	b085      	sub	sp, #20
     5c4:	af00      	add	r7, sp, #0
     5c6:	6078      	str	r0, [r7, #4]
     5c8:	6039      	str	r1, [r7, #0]
    uint32_t ui32Val = 0, uCnt = 0;
     5ca:	2300      	movs	r3, #0
     5cc:	60fb      	str	r3, [r7, #12]
     5ce:	2300      	movs	r3, #0
     5d0:	60bb      	str	r3, [r7, #8]

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     5d2:	e012      	b.n	5fa <decstr_to_u+0x3a>
    {
        ++uCnt;
     5d4:	68bb      	ldr	r3, [r7, #8]
     5d6:	3301      	adds	r3, #1
     5d8:	60bb      	str	r3, [r7, #8]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     5da:	68fa      	ldr	r2, [r7, #12]
     5dc:	4613      	mov	r3, r2
     5de:	009b      	lsls	r3, r3, #2
     5e0:	4413      	add	r3, r2
     5e2:	005b      	lsls	r3, r3, #1
     5e4:	60fb      	str	r3, [r7, #12]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     5e6:	687b      	ldr	r3, [r7, #4]
     5e8:	781b      	ldrb	r3, [r3, #0]
     5ea:	461a      	mov	r2, r3
     5ec:	68fb      	ldr	r3, [r7, #12]
     5ee:	4413      	add	r3, r2
     5f0:	3b30      	subs	r3, #48	; 0x30
     5f2:	60fb      	str	r3, [r7, #12]
        pcStr++;
     5f4:	687b      	ldr	r3, [r7, #4]
     5f6:	3301      	adds	r3, #1
     5f8:	607b      	str	r3, [r7, #4]
static uint32_t
decstr_to_u(const char *pcStr, uint32_t *pui32CharCnt)
{
    uint32_t ui32Val = 0, uCnt = 0;

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	781b      	ldrb	r3, [r3, #0]
     5fe:	2b2f      	cmp	r3, #47	; 0x2f
     600:	d903      	bls.n	60a <decstr_to_u+0x4a>
     602:	687b      	ldr	r3, [r7, #4]
     604:	781b      	ldrb	r3, [r3, #0]
     606:	2b39      	cmp	r3, #57	; 0x39
     608:	d9e4      	bls.n	5d4 <decstr_to_u+0x14>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
     60a:	683b      	ldr	r3, [r7, #0]
     60c:	2b00      	cmp	r3, #0
     60e:	d002      	beq.n	616 <decstr_to_u+0x56>
    {
        *pui32CharCnt = uCnt;
     610:	683b      	ldr	r3, [r7, #0]
     612:	68ba      	ldr	r2, [r7, #8]
     614:	601a      	str	r2, [r3, #0]
    }

    return ui32Val;
     616:	68fb      	ldr	r3, [r7, #12]
}
     618:	4618      	mov	r0, r3
     61a:	3714      	adds	r7, #20
     61c:	46bd      	mov	sp, r7
     61e:	f85d 7b04 	ldr.w	r7, [sp], #4
     622:	4770      	bx	lr

00000624 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     624:	b580      	push	{r7, lr}
     626:	b090      	sub	sp, #64	; 0x40
     628:	af00      	add	r7, sp, #0
     62a:	e9c7 0102 	strd	r0, r1, [r7, #8]
     62e:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     630:	2300      	movs	r3, #0
     632:	63fb      	str	r3, [r7, #60]	; 0x3c
     634:	2300      	movs	r3, #0
     636:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     638:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     63c:	f7ff fe86 	bl	34c <divu64_10>
     640:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     644:	68b9      	ldr	r1, [r7, #8]
     646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     648:	4613      	mov	r3, r2
     64a:	009b      	lsls	r3, r3, #2
     64c:	4413      	add	r3, r2
     64e:	005b      	lsls	r3, r3, #1
     650:	1acb      	subs	r3, r1, r3
     652:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     656:	1c5a      	adds	r2, r3, #1
     658:	63fa      	str	r2, [r7, #60]	; 0x3c
     65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     65c:	b2d2      	uxtb	r2, r2
     65e:	3230      	adds	r2, #48	; 0x30
     660:	b2d2      	uxtb	r2, r2
     662:	f107 0140 	add.w	r1, r7, #64	; 0x40
     666:	440b      	add	r3, r1
     668:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     66c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     670:	e9c7 2302 	strd	r2, r3, [r7, #8]
    } while ( ui64Val );
     674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     678:	ea52 0103 	orrs.w	r1, r2, r3
     67c:	d1dc      	bne.n	638 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     680:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     682:	687b      	ldr	r3, [r7, #4]
     684:	2b00      	cmp	r3, #0
     686:	d011      	beq.n	6ac <uint64_to_str+0x88>
    {
        while ( ix-- )
     688:	e008      	b.n	69c <uint64_to_str+0x78>
        {
            *pcBuf++ = tbuf[ix];
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	1c5a      	adds	r2, r3, #1
     68e:	607a      	str	r2, [r7, #4]
     690:	f107 0110 	add.w	r1, r7, #16
     694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     696:	440a      	add	r2, r1
     698:	7812      	ldrb	r2, [r2, #0]
     69a:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
     69c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     69e:	1e5a      	subs	r2, r3, #1
     6a0:	63fa      	str	r2, [r7, #60]	; 0x3c
     6a2:	2b00      	cmp	r3, #0
     6a4:	d1f1      	bne.n	68a <uint64_to_str+0x66>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	2200      	movs	r2, #0
     6aa:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     6ae:	4618      	mov	r0, r3
     6b0:	3740      	adds	r7, #64	; 0x40
     6b2:	46bd      	mov	sp, r7
     6b4:	bd80      	pop	{r7, pc}
     6b6:	bf00      	nop

000006b8 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     6b8:	b4b0      	push	{r4, r5, r7}
     6ba:	b08d      	sub	sp, #52	; 0x34
     6bc:	af00      	add	r7, sp, #0
     6be:	e9c7 0102 	strd	r0, r1, [r7, #8]
     6c2:	607a      	str	r2, [r7, #4]
     6c4:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     6c6:	2300      	movs	r3, #0
     6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     6ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     6ce:	ea52 0103 	orrs.w	r1, r2, r3
     6d2:	d109      	bne.n	6e8 <uint64_to_hexstr+0x30>
    {
        tbuf[ix++] = '0';   // Print a '0'
     6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     6d6:	1c5a      	adds	r2, r3, #1
     6d8:	62fa      	str	r2, [r7, #44]	; 0x2c
     6da:	f107 0230 	add.w	r2, r7, #48	; 0x30
     6de:	4413      	add	r3, r2
     6e0:	2230      	movs	r2, #48	; 0x30
     6e2:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     6e6:	e028      	b.n	73a <uint64_to_hexstr+0x82>
     6e8:	e027      	b.n	73a <uint64_to_hexstr+0x82>
    {
        cCh = ui64Val & 0xf;
     6ea:	7a3b      	ldrb	r3, [r7, #8]
     6ec:	f003 030f 	and.w	r3, r3, #15
     6f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     6f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     6f8:	2b09      	cmp	r3, #9
     6fa:	d90a      	bls.n	712 <uint64_to_hexstr+0x5a>
        {
            cCh += bLower ? 0x27 : 0x7;
     6fc:	78fb      	ldrb	r3, [r7, #3]
     6fe:	2b00      	cmp	r3, #0
     700:	d001      	beq.n	706 <uint64_to_hexstr+0x4e>
     702:	2327      	movs	r3, #39	; 0x27
     704:	e000      	b.n	708 <uint64_to_hexstr+0x50>
     706:	2307      	movs	r3, #7
     708:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     70c:	4413      	add	r3, r2
     70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     714:	1c5a      	adds	r2, r3, #1
     716:	62fa      	str	r2, [r7, #44]	; 0x2c
     718:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     71c:	3230      	adds	r2, #48	; 0x30
     71e:	b2d2      	uxtb	r2, r2
     720:	f107 0130 	add.w	r1, r7, #48	; 0x30
     724:	440b      	add	r3, r1
     726:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     72a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     72e:	0914      	lsrs	r4, r2, #4
     730:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     734:	091d      	lsrs	r5, r3, #4
     736:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
     73a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     73e:	ea52 0103 	orrs.w	r1, r2, r3
     742:	d1d2      	bne.n	6ea <uint64_to_hexstr+0x32>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     746:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     748:	687b      	ldr	r3, [r7, #4]
     74a:	2b00      	cmp	r3, #0
     74c:	d011      	beq.n	772 <uint64_to_hexstr+0xba>
    {
        while (ix--)
     74e:	e008      	b.n	762 <uint64_to_hexstr+0xaa>
        {
            *pcBuf++ = tbuf[ix];
     750:	687b      	ldr	r3, [r7, #4]
     752:	1c5a      	adds	r2, r3, #1
     754:	607a      	str	r2, [r7, #4]
     756:	f107 0110 	add.w	r1, r7, #16
     75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     75c:	440a      	add	r2, r1
     75e:	7812      	ldrb	r2, [r2, #0]
     760:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
     762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     764:	1e5a      	subs	r2, r3, #1
     766:	62fa      	str	r2, [r7, #44]	; 0x2c
     768:	2b00      	cmp	r3, #0
     76a:	d1f1      	bne.n	750 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	2200      	movs	r2, #0
     770:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     774:	4618      	mov	r0, r3
     776:	3734      	adds	r7, #52	; 0x34
     778:	46bd      	mov	sp, r7
     77a:	bcb0      	pop	{r4, r5, r7}
     77c:	4770      	bx	lr
     77e:	bf00      	nop

00000780 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     780:	b580      	push	{r7, lr}
     782:	b08e      	sub	sp, #56	; 0x38
     784:	af00      	add	r7, sp, #0
     786:	60f8      	str	r0, [r7, #12]
     788:	60b9      	str	r1, [r7, #8]
     78a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Mantissa, i32IntPart, i32FracPart;
    char *pcBufInitial;

    iBufSize = *(uint32_t*)pcBuf;
     78c:	68bb      	ldr	r3, [r7, #8]
     78e:	681b      	ldr	r3, [r3, #0]
     790:	62bb      	str	r3, [r7, #40]	; 0x28
    if (iBufSize < 4)
     792:	6abb      	ldr	r3, [r7, #40]	; 0x28
     794:	2b03      	cmp	r3, #3
     796:	dc02      	bgt.n	79e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     798:	f06f 0302 	mvn.w	r3, #2
     79c:	e0d6      	b.n	94c <ftoa+0x1cc>
    }

    if (fValue == 0.0f)
     79e:	edd7 7a03 	vldr	s15, [r7, #12]
     7a2:	eef5 7a40 	vcmp.f32	s15, #0.0
     7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     7aa:	d104      	bne.n	7b6 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     7ac:	68bb      	ldr	r3, [r7, #8]
     7ae:	4a69      	ldr	r2, [pc, #420]	; (954 <ftoa+0x1d4>)
     7b0:	601a      	str	r2, [r3, #0]
        return 3;
     7b2:	2303      	movs	r3, #3
     7b4:	e0ca      	b.n	94c <ftoa+0x1cc>
    }

    pcBufInitial = pcBuf;
     7b6:	68bb      	ldr	r3, [r7, #8]
     7b8:	627b      	str	r3, [r7, #36]	; 0x24

    unFloatValue.F = fValue;
     7ba:	68fb      	ldr	r3, [r7, #12]
     7bc:	617b      	str	r3, [r7, #20]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     7be:	697b      	ldr	r3, [r7, #20]
     7c0:	15db      	asrs	r3, r3, #23
     7c2:	b2db      	uxtb	r3, r3
     7c4:	3b7f      	subs	r3, #127	; 0x7f
     7c6:	623b      	str	r3, [r7, #32]
    i32Mantissa = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     7c8:	697b      	ldr	r3, [r7, #20]
     7ca:	f3c3 0316 	ubfx	r3, r3, #0, #23
     7ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     7d2:	61fb      	str	r3, [r7, #28]
    i32FracPart = 0;
     7d4:	2300      	movs	r3, #0
     7d6:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     7d8:	2300      	movs	r3, #0
     7da:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     7dc:	6a3b      	ldr	r3, [r7, #32]
     7de:	2b1e      	cmp	r3, #30
     7e0:	dd02      	ble.n	7e8 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     7e2:	f06f 0301 	mvn.w	r3, #1
     7e6:	e0b1      	b.n	94c <ftoa+0x1cc>
    }
    else if (iExp2 < -23)
     7e8:	6a3b      	ldr	r3, [r7, #32]
     7ea:	f113 0f17 	cmn.w	r3, #23
     7ee:	da02      	bge.n	7f6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     7f0:	f04f 33ff 	mov.w	r3, #4294967295
     7f4:	e0aa      	b.n	94c <ftoa+0x1cc>
    }
    else if (iExp2 >= 23)
     7f6:	6a3b      	ldr	r3, [r7, #32]
     7f8:	2b16      	cmp	r3, #22
     7fa:	dd06      	ble.n	80a <ftoa+0x8a>
    {
        i32IntPart = i32Mantissa << (iExp2 - 23);
     7fc:	6a3b      	ldr	r3, [r7, #32]
     7fe:	3b17      	subs	r3, #23
     800:	69fa      	ldr	r2, [r7, #28]
     802:	fa02 f303 	lsl.w	r3, r2, r3
     806:	637b      	str	r3, [r7, #52]	; 0x34
     808:	e01a      	b.n	840 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     80a:	6a3b      	ldr	r3, [r7, #32]
     80c:	2b00      	cmp	r3, #0
     80e:	db0f      	blt.n	830 <ftoa+0xb0>
    {
        i32IntPart = i32Mantissa >> (23 - iExp2);
     810:	6a3b      	ldr	r3, [r7, #32]
     812:	f1c3 0317 	rsb	r3, r3, #23
     816:	69fa      	ldr	r2, [r7, #28]
     818:	fa42 f303 	asr.w	r3, r2, r3
     81c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Mantissa << (iExp2 + 1)) & 0x00FFFFFF;
     81e:	6a3b      	ldr	r3, [r7, #32]
     820:	3301      	adds	r3, #1
     822:	69fa      	ldr	r2, [r7, #28]
     824:	fa02 f303 	lsl.w	r3, r2, r3
     828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     82c:	633b      	str	r3, [r7, #48]	; 0x30
     82e:	e007      	b.n	840 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Mantissa & 0x00FFFFFF) >> -(iExp2 + 1);
     830:	69fb      	ldr	r3, [r7, #28]
     832:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     836:	6a3b      	ldr	r3, [r7, #32]
     838:	43db      	mvns	r3, r3
     83a:	fa42 f303 	asr.w	r3, r2, r3
     83e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     840:	697b      	ldr	r3, [r7, #20]
     842:	2b00      	cmp	r3, #0
     844:	da04      	bge.n	850 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     846:	68bb      	ldr	r3, [r7, #8]
     848:	1c5a      	adds	r2, r3, #1
     84a:	60ba      	str	r2, [r7, #8]
     84c:	222d      	movs	r2, #45	; 0x2d
     84e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     852:	2b00      	cmp	r3, #0
     854:	d105      	bne.n	862 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     856:	68bb      	ldr	r3, [r7, #8]
     858:	1c5a      	adds	r2, r3, #1
     85a:	60ba      	str	r2, [r7, #8]
     85c:	2230      	movs	r2, #48	; 0x30
     85e:	701a      	strb	r2, [r3, #0]
     860:	e023      	b.n	8aa <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
     862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     864:	2b00      	cmp	r3, #0
     866:	dd09      	ble.n	87c <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
     868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     86a:	461a      	mov	r2, r3
     86c:	ea4f 73e2 	mov.w	r3, r2, asr #31
     870:	4610      	mov	r0, r2
     872:	4619      	mov	r1, r3
     874:	68ba      	ldr	r2, [r7, #8]
     876:	f7ff fed5 	bl	624 <uint64_to_str>
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     87a:	e012      	b.n	8a2 <ftoa+0x122>
        {
            uint64_to_str(i32IntPart, pcBuf);
        }
        else
        {
            *pcBuf++ = '-';
     87c:	68bb      	ldr	r3, [r7, #8]
     87e:	1c5a      	adds	r2, r3, #1
     880:	60ba      	str	r2, [r7, #8]
     882:	222d      	movs	r2, #45	; 0x2d
     884:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     888:	425b      	negs	r3, r3
     88a:	461a      	mov	r2, r3
     88c:	ea4f 73e2 	mov.w	r3, r2, asr #31
     890:	4610      	mov	r0, r2
     892:	4619      	mov	r1, r3
     894:	68ba      	ldr	r2, [r7, #8]
     896:	f7ff fec5 	bl	624 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     89a:	e002      	b.n	8a2 <ftoa+0x122>
        {
            pcBuf++;
     89c:	68bb      	ldr	r3, [r7, #8]
     89e:	3301      	adds	r3, #1
     8a0:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
     8a2:	68bb      	ldr	r3, [r7, #8]
     8a4:	781b      	ldrb	r3, [r3, #0]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d1f8      	bne.n	89c <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     8aa:	68bb      	ldr	r3, [r7, #8]
     8ac:	1c5a      	adds	r2, r3, #1
     8ae:	60ba      	str	r2, [r7, #8]
     8b0:	222e      	movs	r2, #46	; 0x2e
     8b2:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     8b6:	2b00      	cmp	r3, #0
     8b8:	d105      	bne.n	8c6 <ftoa+0x146>
    {
        *pcBuf++ = '0';
     8ba:	68bb      	ldr	r3, [r7, #8]
     8bc:	1c5a      	adds	r2, r3, #1
     8be:	60ba      	str	r2, [r7, #8]
     8c0:	2230      	movs	r2, #48	; 0x30
     8c2:	701a      	strb	r2, [r3, #0]
     8c4:	e03c      	b.n	940 <ftoa+0x1c0>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     8c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     8c8:	68bb      	ldr	r3, [r7, #8]
     8ca:	1ad2      	subs	r2, r2, r3
     8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
     8ce:	4413      	add	r3, r2
     8d0:	3b01      	subs	r3, #1
     8d2:	61bb      	str	r3, [r7, #24]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     8d4:	69ba      	ldr	r2, [r7, #24]
     8d6:	687b      	ldr	r3, [r7, #4]
     8d8:	429a      	cmp	r2, r3
     8da:	bfb8      	it	lt
     8dc:	4613      	movlt	r3, r2
     8de:	61bb      	str	r3, [r7, #24]

        for (jx = 0; jx < iMax; jx++)
     8e0:	2300      	movs	r3, #0
     8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
     8e4:	e015      	b.n	912 <ftoa+0x192>
        {
            i32FracPart *= 10;
     8e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     8e8:	4613      	mov	r3, r2
     8ea:	009b      	lsls	r3, r3, #2
     8ec:	4413      	add	r3, r2
     8ee:	005b      	lsls	r3, r3, #1
     8f0:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     8f2:	68bb      	ldr	r3, [r7, #8]
     8f4:	1c5a      	adds	r2, r3, #1
     8f6:	60ba      	str	r2, [r7, #8]
     8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     8fa:	1612      	asrs	r2, r2, #24
     8fc:	b2d2      	uxtb	r2, r2
     8fe:	3230      	adds	r2, #48	; 0x30
     900:	b2d2      	uxtb	r2, r2
     902:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     906:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     90a:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
     90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     90e:	3301      	adds	r3, #1
     910:	62fb      	str	r3, [r7, #44]	; 0x2c
     912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     914:	69bb      	ldr	r3, [r7, #24]
     916:	429a      	cmp	r2, r3
     918:	dbe5      	blt.n	8e6 <ftoa+0x166>
        }

        //
        // Remove trailing zeros
        //
        --pcBuf;
     91a:	68bb      	ldr	r3, [r7, #8]
     91c:	3b01      	subs	r3, #1
     91e:	60bb      	str	r3, [r7, #8]
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     920:	e002      	b.n	928 <ftoa+0x1a8>
        {
            --pcBuf;
     922:	68bb      	ldr	r3, [r7, #8]
     924:	3b01      	subs	r3, #1
     926:	60bb      	str	r3, [r7, #8]

        //
        // Remove trailing zeros
        //
        --pcBuf;
        while ((*pcBuf == '0')  &&  (*(pcBuf-1) != '.'))
     928:	68bb      	ldr	r3, [r7, #8]
     92a:	781b      	ldrb	r3, [r3, #0]
     92c:	2b30      	cmp	r3, #48	; 0x30
     92e:	d104      	bne.n	93a <ftoa+0x1ba>
     930:	68bb      	ldr	r3, [r7, #8]
     932:	3b01      	subs	r3, #1
     934:	781b      	ldrb	r3, [r3, #0]
     936:	2b2e      	cmp	r3, #46	; 0x2e
     938:	d1f3      	bne.n	922 <ftoa+0x1a2>
        {
            --pcBuf;
        }
        ++pcBuf;
     93a:	68bb      	ldr	r3, [r7, #8]
     93c:	3301      	adds	r3, #1
     93e:	60bb      	str	r3, [r7, #8]
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     940:	68bb      	ldr	r3, [r7, #8]
     942:	2200      	movs	r2, #0
     944:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     946:	68ba      	ldr	r2, [r7, #8]
     948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     94a:	1ad3      	subs	r3, r2, r3
} // ftoa()
     94c:	4618      	mov	r0, r3
     94e:	3738      	adds	r7, #56	; 0x38
     950:	46bd      	mov	sp, r7
     952:	bd80      	pop	{r7, pc}
     954:	00302e30 	.word	0x00302e30

00000958 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     958:	b580      	push	{r7, lr}
     95a:	b094      	sub	sp, #80	; 0x50
     95c:	af00      	add	r7, sp, #0
     95e:	60f8      	str	r0, [r7, #12]
     960:	60b9      	str	r1, [r7, #8]
     962:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     964:	2300      	movs	r3, #0
     966:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;

    while ( *pcFmt != 0x0 )
     968:	e283      	b.n	e72 <am_util_stdio_vsprintf+0x51a>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     96a:	2306      	movs	r3, #6
     96c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     96e:	68bb      	ldr	r3, [r7, #8]
     970:	781b      	ldrb	r3, [r3, #0]
     972:	2b25      	cmp	r3, #37	; 0x25
     974:	d01f      	beq.n	9b6 <am_util_stdio_vsprintf+0x5e>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     976:	68fb      	ldr	r3, [r7, #12]
     978:	2b00      	cmp	r3, #0
     97a:	d015      	beq.n	9a8 <am_util_stdio_vsprintf+0x50>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     97c:	68bb      	ldr	r3, [r7, #8]
     97e:	781b      	ldrb	r3, [r3, #0]
     980:	2b0a      	cmp	r3, #10
     982:	d10b      	bne.n	99c <am_util_stdio_vsprintf+0x44>
     984:	4baa      	ldr	r3, [pc, #680]	; (c30 <am_util_stdio_vsprintf+0x2d8>)
     986:	781b      	ldrb	r3, [r3, #0]
     988:	2b00      	cmp	r3, #0
     98a:	d007      	beq.n	99c <am_util_stdio_vsprintf+0x44>
                {
                    *pcBuf++ = '\r';
     98c:	68fb      	ldr	r3, [r7, #12]
     98e:	1c5a      	adds	r2, r3, #1
     990:	60fa      	str	r2, [r7, #12]
     992:	220d      	movs	r2, #13
     994:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     998:	3301      	adds	r3, #1
     99a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     99c:	68fb      	ldr	r3, [r7, #12]
     99e:	1c5a      	adds	r2, r3, #1
     9a0:	60fa      	str	r2, [r7, #12]
     9a2:	68ba      	ldr	r2, [r7, #8]
     9a4:	7812      	ldrb	r2, [r2, #0]
     9a6:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     9a8:	68bb      	ldr	r3, [r7, #8]
     9aa:	3301      	adds	r3, #1
     9ac:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     9b0:	3301      	adds	r3, #1
     9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     9b4:	e25d      	b.n	e72 <am_util_stdio_vsprintf+0x51a>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     9b6:	68bb      	ldr	r3, [r7, #8]
     9b8:	3301      	adds	r3, #1
     9ba:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     9bc:	2300      	movs	r3, #0
     9be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     9c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     9c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     9ca:	2320      	movs	r3, #32
     9cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     9d0:	68bb      	ldr	r3, [r7, #8]
     9d2:	781b      	ldrb	r3, [r3, #0]
     9d4:	2b30      	cmp	r3, #48	; 0x30
     9d6:	d105      	bne.n	9e4 <am_util_stdio_vsprintf+0x8c>
        {
            ui8PadChar = '0';
     9d8:	2330      	movs	r3, #48	; 0x30
     9da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     9de:	68bb      	ldr	r3, [r7, #8]
     9e0:	3301      	adds	r3, #1
     9e2:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_u(pcFmt, &ui32NumChars);
     9e4:	f107 0310 	add.w	r3, r7, #16
     9e8:	68b8      	ldr	r0, [r7, #8]
     9ea:	4619      	mov	r1, r3
     9ec:	f7ff fde8 	bl	5c0 <decstr_to_u>
     9f0:	4603      	mov	r3, r0
     9f2:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     9f4:	693b      	ldr	r3, [r7, #16]
     9f6:	68ba      	ldr	r2, [r7, #8]
     9f8:	4413      	add	r3, r2
     9fa:	60bb      	str	r3, [r7, #8]

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     9fc:	68bb      	ldr	r3, [r7, #8]
     9fe:	781b      	ldrb	r3, [r3, #0]
     a00:	2b2e      	cmp	r3, #46	; 0x2e
     a02:	d10e      	bne.n	a22 <am_util_stdio_vsprintf+0xca>
        {
            ++pcFmt;
     a04:	68bb      	ldr	r3, [r7, #8]
     a06:	3301      	adds	r3, #1
     a08:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_u(pcFmt, &ui32NumChars);
     a0a:	f107 0310 	add.w	r3, r7, #16
     a0e:	68b8      	ldr	r0, [r7, #8]
     a10:	4619      	mov	r1, r3
     a12:	f7ff fdd5 	bl	5c0 <decstr_to_u>
     a16:	4603      	mov	r3, r0
     a18:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     a1a:	693b      	ldr	r3, [r7, #16]
     a1c:	68ba      	ldr	r2, [r7, #8]
     a1e:	4413      	add	r3, r2
     a20:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     a22:	68bb      	ldr	r3, [r7, #8]
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	2b6c      	cmp	r3, #108	; 0x6c
     a28:	d10c      	bne.n	a44 <am_util_stdio_vsprintf+0xec>
        {
            pcFmt++;
     a2a:	68bb      	ldr	r3, [r7, #8]
     a2c:	3301      	adds	r3, #1
     a2e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     a30:	68bb      	ldr	r3, [r7, #8]
     a32:	781b      	ldrb	r3, [r3, #0]
     a34:	2b6c      	cmp	r3, #108	; 0x6c
     a36:	d105      	bne.n	a44 <am_util_stdio_vsprintf+0xec>
            {
                pcFmt++;
     a38:	68bb      	ldr	r3, [r7, #8]
     a3a:	3301      	adds	r3, #1
     a3c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     a3e:	2301      	movs	r3, #1
     a40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     a44:	68bb      	ldr	r3, [r7, #8]
     a46:	781b      	ldrb	r3, [r3, #0]
     a48:	3b46      	subs	r3, #70	; 0x46
     a4a:	2b32      	cmp	r3, #50	; 0x32
     a4c:	f200 8201 	bhi.w	e52 <am_util_stdio_vsprintf+0x4fa>
     a50:	a101      	add	r1, pc, #4	; (adr r1, a58 <am_util_stdio_vsprintf+0x100>)
     a52:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     a56:	bf00      	nop
     a58:	00000dd9 	.word	0x00000dd9
     a5c:	00000e53 	.word	0x00000e53
     a60:	00000e53 	.word	0x00000e53
     a64:	00000e53 	.word	0x00000e53
     a68:	00000e53 	.word	0x00000e53
     a6c:	00000e53 	.word	0x00000e53
     a70:	00000e53 	.word	0x00000e53
     a74:	00000e53 	.word	0x00000e53
     a78:	00000e53 	.word	0x00000e53
     a7c:	00000e53 	.word	0x00000e53
     a80:	00000e53 	.word	0x00000e53
     a84:	00000e53 	.word	0x00000e53
     a88:	00000e53 	.word	0x00000e53
     a8c:	00000e53 	.word	0x00000e53
     a90:	00000e53 	.word	0x00000e53
     a94:	00000e53 	.word	0x00000e53
     a98:	00000e53 	.word	0x00000e53
     a9c:	00000e53 	.word	0x00000e53
     aa0:	00000b85 	.word	0x00000b85
     aa4:	00000e53 	.word	0x00000e53
     aa8:	00000e53 	.word	0x00000e53
     aac:	00000e53 	.word	0x00000e53
     ab0:	00000e53 	.word	0x00000e53
     ab4:	00000e53 	.word	0x00000e53
     ab8:	00000e53 	.word	0x00000e53
     abc:	00000e53 	.word	0x00000e53
     ac0:	00000e53 	.word	0x00000e53
     ac4:	00000e53 	.word	0x00000e53
     ac8:	00000e53 	.word	0x00000e53
     acc:	00000b25 	.word	0x00000b25
     ad0:	00000ca5 	.word	0x00000ca5
     ad4:	00000e53 	.word	0x00000e53
     ad8:	00000dd9 	.word	0x00000dd9
     adc:	00000e53 	.word	0x00000e53
     ae0:	00000e53 	.word	0x00000e53
     ae4:	00000ca5 	.word	0x00000ca5
     ae8:	00000e53 	.word	0x00000e53
     aec:	00000e53 	.word	0x00000e53
     af0:	00000e53 	.word	0x00000e53
     af4:	00000e53 	.word	0x00000e53
     af8:	00000e53 	.word	0x00000e53
     afc:	00000e53 	.word	0x00000e53
     b00:	00000e53 	.word	0x00000e53
     b04:	00000e53 	.word	0x00000e53
     b08:	00000e53 	.word	0x00000e53
     b0c:	00000b4b 	.word	0x00000b4b
     b10:	00000e53 	.word	0x00000e53
     b14:	00000c15 	.word	0x00000c15
     b18:	00000e53 	.word	0x00000e53
     b1c:	00000e53 	.word	0x00000e53
     b20:	00000b7f 	.word	0x00000b7f
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     b24:	687b      	ldr	r3, [r7, #4]
     b26:	1d1a      	adds	r2, r3, #4
     b28:	607a      	str	r2, [r7, #4]
     b2a:	681b      	ldr	r3, [r3, #0]
     b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if ( pcBuf )
     b30:	68fb      	ldr	r3, [r7, #12]
     b32:	2b00      	cmp	r3, #0
     b34:	d005      	beq.n	b42 <am_util_stdio_vsprintf+0x1ea>
                {
                    *pcBuf++ = ui8CharSpecifier;
     b36:	68fb      	ldr	r3, [r7, #12]
     b38:	1c5a      	adds	r2, r3, #1
     b3a:	60fa      	str	r2, [r7, #12]
     b3c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
     b40:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b44:	3301      	adds	r3, #1
     b46:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     b48:	e190      	b.n	e6c <am_util_stdio_vsprintf+0x514>

            case 's':
                pcStr = va_arg(pArgs, char *);
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	1d1a      	adds	r2, r3, #4
     b4e:	607a      	str	r2, [r7, #4]
     b50:	681b      	ldr	r3, [r3, #0]
     b52:	64fb      	str	r3, [r7, #76]	; 0x4c

                while (*pcStr != 0x0)
     b54:	e00e      	b.n	b74 <am_util_stdio_vsprintf+0x21c>
                {
                    if ( pcBuf )
     b56:	68fb      	ldr	r3, [r7, #12]
     b58:	2b00      	cmp	r3, #0
     b5a:	d005      	beq.n	b68 <am_util_stdio_vsprintf+0x210>
                    {
                        *pcBuf++ = *pcStr;
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	1c5a      	adds	r2, r3, #1
     b60:	60fa      	str	r2, [r7, #12]
     b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     b64:	7812      	ldrb	r2, [r2, #0]
     b66:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     b6a:	3301      	adds	r3, #1
     b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b70:	3301      	adds	r3, #1
     b72:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;

            case 's':
                pcStr = va_arg(pArgs, char *);

                while (*pcStr != 0x0)
     b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     b76:	781b      	ldrb	r3, [r3, #0]
     b78:	2b00      	cmp	r3, #0
     b7a:	d1ec      	bne.n	b56 <am_util_stdio_vsprintf+0x1fe>
                    }

                    ++pcStr;
                    ++ui32CharCnt;
                }
                break;
     b7c:	e176      	b.n	e6c <am_util_stdio_vsprintf+0x514>

            case 'x':
                bLower = true;
     b7e:	2301      	movs	r3, #1
     b80:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     b84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     b88:	2b00      	cmp	r3, #0
     b8a:	d009      	beq.n	ba0 <am_util_stdio_vsprintf+0x248>
     b8c:	687b      	ldr	r3, [r7, #4]
     b8e:	3307      	adds	r3, #7
     b90:	f023 0307 	bic.w	r3, r3, #7
     b94:	f103 0208 	add.w	r2, r3, #8
     b98:	607a      	str	r2, [r7, #4]
     b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
     b9e:	e006      	b.n	bae <am_util_stdio_vsprintf+0x256>
                                      va_arg(pArgs, uint32_t);
     ba0:	687b      	ldr	r3, [r7, #4]
     ba2:	1d1a      	adds	r2, r3, #4
     ba4:	607a      	str	r2, [r7, #4]
     ba6:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     ba8:	461a      	mov	r2, r3
     baa:	f04f 0300 	mov.w	r3, #0
     bae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
     bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bb4:	2b00      	cmp	r3, #0
     bb6:	d019      	beq.n	bec <am_util_stdio_vsprintf+0x294>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     bb8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     bbc:	f7ff fcda 	bl	574 <ndigits_in_hex>
     bc0:	4603      	mov	r3, r0
     bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
     bc4:	1ad3      	subs	r3, r2, r3
     bc6:	63bb      	str	r3, [r7, #56]	; 0x38

                    while ( iWidth-- > 0 )
     bc8:	e00b      	b.n	be2 <am_util_stdio_vsprintf+0x28a>
                    {
                        if ( pcBuf )
     bca:	68fb      	ldr	r3, [r7, #12]
     bcc:	2b00      	cmp	r3, #0
     bce:	d005      	beq.n	bdc <am_util_stdio_vsprintf+0x284>
                        {
                            //
                            // Pad the string
                            //
                            *pcBuf++ = ui8PadChar;
     bd0:	68fb      	ldr	r3, [r7, #12]
     bd2:	1c5a      	adds	r2, r3, #1
     bd4:	60fa      	str	r2, [r7, #12]
     bd6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
     bda:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
     bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bde:	3301      	adds	r3, #1
     be0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);

                    while ( iWidth-- > 0 )
     be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     be4:	1e5a      	subs	r2, r3, #1
     be6:	63ba      	str	r2, [r7, #56]	; 0x38
     be8:	2b00      	cmp	r3, #0
     bea:	dcee      	bgt.n	bca <am_util_stdio_vsprintf+0x272>
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     bec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     bf0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     bf4:	68fa      	ldr	r2, [r7, #12]
     bf6:	f7ff fd5f 	bl	6b8 <uint64_to_hexstr>
     bfa:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     bfc:	68fb      	ldr	r3, [r7, #12]
     bfe:	2b00      	cmp	r3, #0
     c00:	d003      	beq.n	c0a <am_util_stdio_vsprintf+0x2b2>
                {
                    pcBuf += iVal;
     c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c04:	68fa      	ldr	r2, [r7, #12]
     c06:	4413      	add	r3, r2
     c08:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     c0e:	4413      	add	r3, r2
     c10:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     c12:	e12b      	b.n	e6c <am_util_stdio_vsprintf+0x514>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     c14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     c18:	2b00      	cmp	r3, #0
     c1a:	d00b      	beq.n	c34 <am_util_stdio_vsprintf+0x2dc>
     c1c:	687b      	ldr	r3, [r7, #4]
     c1e:	3307      	adds	r3, #7
     c20:	f023 0307 	bic.w	r3, r3, #7
     c24:	f103 0208 	add.w	r2, r3, #8
     c28:	607a      	str	r2, [r7, #4]
     c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
     c2e:	e008      	b.n	c42 <am_util_stdio_vsprintf+0x2ea>
     c30:	10000314 	.word	0x10000314
                                      va_arg(pArgs, uint32_t);
     c34:	687b      	ldr	r3, [r7, #4]
     c36:	1d1a      	adds	r2, r3, #4
     c38:	607a      	str	r2, [r7, #4]
     c3a:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     c3c:	461a      	mov	r2, r3
     c3e:	f04f 0300 	mov.w	r3, #0
     c42:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
     c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c48:	2b00      	cmp	r3, #0
     c4a:	d019      	beq.n	c80 <am_util_stdio_vsprintf+0x328>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
     c4c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     c50:	f7ff fc50 	bl	4f4 <ndigits_in_u64>
     c54:	4603      	mov	r3, r0
     c56:	6bba      	ldr	r2, [r7, #56]	; 0x38
     c58:	1ad3      	subs	r3, r2, r3
     c5a:	63bb      	str	r3, [r7, #56]	; 0x38

                    while ( iWidth-- > 0 )
     c5c:	e00b      	b.n	c76 <am_util_stdio_vsprintf+0x31e>
                    {
                        if ( pcBuf )
     c5e:	68fb      	ldr	r3, [r7, #12]
     c60:	2b00      	cmp	r3, #0
     c62:	d005      	beq.n	c70 <am_util_stdio_vsprintf+0x318>
                        {
                            *pcBuf++ = ui8PadChar;
     c64:	68fb      	ldr	r3, [r7, #12]
     c66:	1c5a      	adds	r2, r3, #1
     c68:	60fa      	str	r2, [r7, #12]
     c6a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
     c6e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
     c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c72:	3301      	adds	r3, #1
     c74:	63fb      	str	r3, [r7, #60]	; 0x3c
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);

                    while ( iWidth-- > 0 )
     c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c78:	1e5a      	subs	r2, r3, #1
     c7a:	63ba      	str	r2, [r7, #56]	; 0x38
     c7c:	2b00      	cmp	r3, #0
     c7e:	dcee      	bgt.n	c5e <am_util_stdio_vsprintf+0x306>
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
     c80:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     c84:	68fa      	ldr	r2, [r7, #12]
     c86:	f7ff fccd 	bl	624 <uint64_to_str>
     c8a:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     c8c:	68fb      	ldr	r3, [r7, #12]
     c8e:	2b00      	cmp	r3, #0
     c90:	d003      	beq.n	c9a <am_util_stdio_vsprintf+0x342>
                {
                    pcBuf += iVal;
     c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c94:	68fa      	ldr	r2, [r7, #12]
     c96:	4413      	add	r3, r2
     c98:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     c9e:	4413      	add	r3, r2
     ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     ca2:	e0e3      	b.n	e6c <am_util_stdio_vsprintf+0x514>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     ca4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     ca8:	2b00      	cmp	r3, #0
     caa:	d009      	beq.n	cc0 <am_util_stdio_vsprintf+0x368>
     cac:	687b      	ldr	r3, [r7, #4]
     cae:	3307      	adds	r3, #7
     cb0:	f023 0307 	bic.w	r3, r3, #7
     cb4:	f103 0208 	add.w	r2, r3, #8
     cb8:	607a      	str	r2, [r7, #4]
     cba:	e9d3 2300 	ldrd	r2, r3, [r3]
     cbe:	e006      	b.n	cce <am_util_stdio_vsprintf+0x376>
                                     va_arg(pArgs, int32_t);
     cc0:	687b      	ldr	r3, [r7, #4]
     cc2:	1d1a      	adds	r2, r3, #4
     cc4:	607a      	str	r2, [r7, #4]
     cc6:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     cc8:	461a      	mov	r2, r3
     cca:	ea4f 73e2 	mov.w	r3, r2, asr #31
     cce:	e9c7 2306 	strd	r2, r3, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
     cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     cd6:	2a00      	cmp	r2, #0
     cd8:	f173 0100 	sbcs.w	r1, r3, #0
     cdc:	da0a      	bge.n	cf4 <am_util_stdio_vsprintf+0x39c>
                {
                    ui64Val = -i64Val;          // Get absolute value
     cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     ce2:	4252      	negs	r2, r2
     ce4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ce8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                    bNeg = true;
     cec:	2301      	movs	r3, #1
     cee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
     cf2:	e006      	b.n	d02 <am_util_stdio_vsprintf+0x3aa>
                }
                else
                {
                    ui64Val = i64Val;
     cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     cf8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                    bNeg = false;
     cfc:	2300      	movs	r3, #0
     cfe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
     d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d04:	2b00      	cmp	r3, #0
     d06:	d046      	beq.n	d96 <am_util_stdio_vsprintf+0x43e>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
     d08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
     d0c:	4610      	mov	r0, r2
     d0e:	4619      	mov	r1, r3
     d10:	f7ff fc12 	bl	538 <ndigits_in_i64>
     d14:	4603      	mov	r3, r0
     d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d18:	1ad3      	subs	r3, r2, r3
     d1a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
     d1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     d20:	2b00      	cmp	r3, #0
     d22:	d012      	beq.n	d4a <am_util_stdio_vsprintf+0x3f2>
                    {
                        --iWidth;
     d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d26:	3b01      	subs	r3, #1
     d28:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
     d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     d2e:	2b30      	cmp	r3, #48	; 0x30
     d30:	d10b      	bne.n	d4a <am_util_stdio_vsprintf+0x3f2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
     d32:	68fb      	ldr	r3, [r7, #12]
     d34:	2b00      	cmp	r3, #0
     d36:	d004      	beq.n	d42 <am_util_stdio_vsprintf+0x3ea>
                            {
                                *pcBuf++ = '-';
     d38:	68fb      	ldr	r3, [r7, #12]
     d3a:	1c5a      	adds	r2, r3, #1
     d3c:	60fa      	str	r2, [r7, #12]
     d3e:	222d      	movs	r2, #45	; 0x2d
     d40:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
     d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d44:	3301      	adds	r3, #1
     d46:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    while ( iWidth-- > 0 )
     d48:	e00c      	b.n	d64 <am_util_stdio_vsprintf+0x40c>
     d4a:	e00b      	b.n	d64 <am_util_stdio_vsprintf+0x40c>
                    {
                        if ( pcBuf )
     d4c:	68fb      	ldr	r3, [r7, #12]
     d4e:	2b00      	cmp	r3, #0
     d50:	d005      	beq.n	d5e <am_util_stdio_vsprintf+0x406>
                        {
                            *pcBuf++ = ui8PadChar;
     d52:	68fb      	ldr	r3, [r7, #12]
     d54:	1c5a      	adds	r2, r3, #1
     d56:	60fa      	str	r2, [r7, #12]
     d58:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
     d5c:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
     d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d60:	3301      	adds	r3, #1
     d62:	63fb      	str	r3, [r7, #60]	; 0x3c

                            ++ui32CharCnt;
                        }
                    }

                    while ( iWidth-- > 0 )
     d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d66:	1e5a      	subs	r2, r3, #1
     d68:	63ba      	str	r2, [r7, #56]	; 0x38
     d6a:	2b00      	cmp	r3, #0
     d6c:	dcee      	bgt.n	d4c <am_util_stdio_vsprintf+0x3f4>
                        }

                        ++ui32CharCnt;
                    }

                    if ( bNeg  &&  (ui8PadChar == ' ') )
     d6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     d72:	2b00      	cmp	r3, #0
     d74:	d01e      	beq.n	db4 <am_util_stdio_vsprintf+0x45c>
     d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     d7a:	2b20      	cmp	r3, #32
     d7c:	d11a      	bne.n	db4 <am_util_stdio_vsprintf+0x45c>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
     d7e:	68fb      	ldr	r3, [r7, #12]
     d80:	2b00      	cmp	r3, #0
     d82:	d004      	beq.n	d8e <am_util_stdio_vsprintf+0x436>
                        {
                            *pcBuf++ = '-';
     d84:	68fb      	ldr	r3, [r7, #12]
     d86:	1c5a      	adds	r2, r3, #1
     d88:	60fa      	str	r2, [r7, #12]
     d8a:	222d      	movs	r2, #45	; 0x2d
     d8c:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
     d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d90:	3301      	adds	r3, #1
     d92:	63fb      	str	r3, [r7, #60]	; 0x3c
     d94:	e00e      	b.n	db4 <am_util_stdio_vsprintf+0x45c>
                    }
                }
                else
                {
                    if ( bNeg )
     d96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     d9a:	2b00      	cmp	r3, #0
     d9c:	d00a      	beq.n	db4 <am_util_stdio_vsprintf+0x45c>
                    {
                        if ( pcBuf )
     d9e:	68fb      	ldr	r3, [r7, #12]
     da0:	2b00      	cmp	r3, #0
     da2:	d004      	beq.n	dae <am_util_stdio_vsprintf+0x456>
                        {
                            *pcBuf++ = '-';
     da4:	68fb      	ldr	r3, [r7, #12]
     da6:	1c5a      	adds	r2, r3, #1
     da8:	60fa      	str	r2, [r7, #12]
     daa:	222d      	movs	r2, #45	; 0x2d
     dac:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
     dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     db0:	3301      	adds	r3, #1
     db2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
     db4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     db8:	68fa      	ldr	r2, [r7, #12]
     dba:	f7ff fc33 	bl	624 <uint64_to_str>
     dbe:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     dc0:	68fb      	ldr	r3, [r7, #12]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d003      	beq.n	dce <am_util_stdio_vsprintf+0x476>
                {
                    pcBuf += iVal;
     dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     dc8:	68fa      	ldr	r2, [r7, #12]
     dca:	4413      	add	r3, r2
     dcc:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dd2:	4413      	add	r3, r2
     dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     dd6:	e049      	b.n	e6c <am_util_stdio_vsprintf+0x514>


            case 'f':
            case 'F':
                if ( pcBuf )
     dd8:	68fb      	ldr	r3, [r7, #12]
     dda:	2b00      	cmp	r3, #0
     ddc:	d038      	beq.n	e50 <am_util_stdio_vsprintf+0x4f8>
                {
                    float fValue = va_arg(pArgs, double);
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	3307      	adds	r3, #7
     de2:	f023 0307 	bic.w	r3, r3, #7
     de6:	f103 0208 	add.w	r2, r3, #8
     dea:	607a      	str	r2, [r7, #4]
     dec:	e9d3 2300 	ldrd	r2, r3, [r3]
     df0:	4610      	mov	r0, r2
     df2:	4619      	mov	r1, r3
     df4:	f000 fa1c 	bl	1230 <__aeabi_d2f>
     df8:	4603      	mov	r3, r0
     dfa:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
     dfc:	68fb      	ldr	r3, [r7, #12]
     dfe:	2214      	movs	r2, #20
     e00:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
     e02:	6978      	ldr	r0, [r7, #20]
     e04:	68f9      	ldr	r1, [r7, #12]
     e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e08:	f7ff fcba 	bl	780 <ftoa>
     e0c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
     e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e10:	2b00      	cmp	r3, #0
     e12:	da14      	bge.n	e3e <am_util_stdio_vsprintf+0x4e6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
     e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e16:	f1b3 3fff 	cmp.w	r3, #4294967295
     e1a:	d102      	bne.n	e22 <am_util_stdio_vsprintf+0x4ca>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
     e1c:	4b1d      	ldr	r3, [pc, #116]	; (e94 <am_util_stdio_vsprintf+0x53c>)
     e1e:	62bb      	str	r3, [r7, #40]	; 0x28
     e20:	e008      	b.n	e34 <am_util_stdio_vsprintf+0x4dc>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
     e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e24:	f113 0f02 	cmn.w	r3, #2
     e28:	d102      	bne.n	e30 <am_util_stdio_vsprintf+0x4d8>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
     e2a:	4b1b      	ldr	r3, [pc, #108]	; (e98 <am_util_stdio_vsprintf+0x540>)
     e2c:	62bb      	str	r3, [r7, #40]	; 0x28
     e2e:	e001      	b.n	e34 <am_util_stdio_vsprintf+0x4dc>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
     e30:	4b1a      	ldr	r3, [pc, #104]	; (e9c <am_util_stdio_vsprintf+0x544>)
     e32:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
     e34:	68fb      	ldr	r3, [r7, #12]
     e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
     e38:	601a      	str	r2, [r3, #0]
                        iVal = 3;
     e3a:	2303      	movs	r3, #3
     e3c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
     e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e42:	4413      	add	r3, r2
     e44:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
     e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e48:	68fa      	ldr	r2, [r7, #12]
     e4a:	4413      	add	r3, r2
     e4c:	60fb      	str	r3, [r7, #12]
                }
                break;
     e4e:	e00d      	b.n	e6c <am_util_stdio_vsprintf+0x514>
     e50:	e00c      	b.n	e6c <am_util_stdio_vsprintf+0x514>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
     e52:	68fb      	ldr	r3, [r7, #12]
     e54:	2b00      	cmp	r3, #0
     e56:	d005      	beq.n	e64 <am_util_stdio_vsprintf+0x50c>
                {
                    *pcBuf++ = *pcFmt;
     e58:	68fb      	ldr	r3, [r7, #12]
     e5a:	1c5a      	adds	r2, r3, #1
     e5c:	60fa      	str	r2, [r7, #12]
     e5e:	68ba      	ldr	r2, [r7, #8]
     e60:	7812      	ldrb	r2, [r2, #0]
     e62:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e66:	3301      	adds	r3, #1
     e68:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e6a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
     e6c:	68bb      	ldr	r3, [r7, #8]
     e6e:	3301      	adds	r3, #1
     e70:	60bb      	str	r3, [r7, #8]
    uint32_t ui32NumChars, ui32CharCnt = 0;
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;

    while ( *pcFmt != 0x0 )
     e72:	68bb      	ldr	r3, [r7, #8]
     e74:	781b      	ldrb	r3, [r3, #0]
     e76:	2b00      	cmp	r3, #0
     e78:	f47f ad77 	bne.w	96a <am_util_stdio_vsprintf+0x12>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
     e7c:	68fb      	ldr	r3, [r7, #12]
     e7e:	2b00      	cmp	r3, #0
     e80:	d002      	beq.n	e88 <am_util_stdio_vsprintf+0x530>
    {
        *pcBuf = 0x0;
     e82:	68fb      	ldr	r3, [r7, #12]
     e84:	2200      	movs	r2, #0
     e86:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
     e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
     e8a:	4618      	mov	r0, r3
     e8c:	3750      	adds	r7, #80	; 0x50
     e8e:	46bd      	mov	sp, r7
     e90:	bd80      	pop	{r7, pc}
     e92:	bf00      	nop
     e94:	00302e30 	.word	0x00302e30
     e98:	00232e23 	.word	0x00232e23
     e9c:	003f2e3f 	.word	0x003f2e3f

00000ea0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
     ea0:	b40f      	push	{r0, r1, r2, r3}
     ea2:	b580      	push	{r7, lr}
     ea4:	b082      	sub	sp, #8
     ea6:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
     ea8:	f107 0314 	add.w	r3, r7, #20
     eac:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
     eae:	4809      	ldr	r0, [pc, #36]	; (ed4 <am_util_stdio_printf+0x34>)
     eb0:	6939      	ldr	r1, [r7, #16]
     eb2:	683a      	ldr	r2, [r7, #0]
     eb4:	f7ff fd50 	bl	958 <am_util_stdio_vsprintf>
     eb8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer out the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
     eba:	4b07      	ldr	r3, [pc, #28]	; (ed8 <am_util_stdio_printf+0x38>)
     ebc:	681b      	ldr	r3, [r3, #0]
     ebe:	4805      	ldr	r0, [pc, #20]	; (ed4 <am_util_stdio_printf+0x34>)
     ec0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
     ec2:	687b      	ldr	r3, [r7, #4]
}
     ec4:	4618      	mov	r0, r3
     ec6:	3708      	adds	r7, #8
     ec8:	46bd      	mov	sp, r7
     eca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     ece:	b004      	add	sp, #16
     ed0:	4770      	bx	lr
     ed2:	bf00      	nop
     ed4:	10000214 	.word	0x10000214
     ed8:	10000318 	.word	0x10000318

00000edc <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     edc:	4811      	ldr	r0, [pc, #68]	; (f24 <zero_loop+0x12>)
     ede:	4912      	ldr	r1, [pc, #72]	; (f28 <zero_loop+0x16>)
     ee0:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     ee2:	f8d1 d000 	ldr.w	sp, [r1]
    
    //
    // Enable the FPU.
    //
    __asm("movw r0,#0xED88\n"
     ee6:	f64e 5088 	movw	r0, #60808	; 0xed88
     eea:	f2ce 0000 	movt	r0, #57344	; 0xe000
     eee:	6801      	ldr	r1, [r0, #0]
     ef0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     ef4:	6001      	str	r1, [r0, #0]
          "str  r1,[r0]\n");

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_etext\n"
     ef6:	480d      	ldr	r0, [pc, #52]	; (f2c <zero_loop+0x1a>)
     ef8:	490d      	ldr	r1, [pc, #52]	; (f30 <zero_loop+0x1e>)
     efa:	4a0e      	ldr	r2, [pc, #56]	; (f34 <zero_loop+0x22>)

00000efc <copy_loop>:
     efc:	f850 3b04 	ldr.w	r3, [r0], #4
     f00:	f841 3b04 	str.w	r3, [r1], #4
     f04:	4291      	cmp	r1, r2
     f06:	f77f aff9 	ble.w	efc <copy_loop>
          "        cmp     r1, r2\n"
          "        ble     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
     f0a:	480b      	ldr	r0, [pc, #44]	; (f38 <zero_loop+0x26>)
     f0c:	490b      	ldr	r1, [pc, #44]	; (f3c <zero_loop+0x2a>)
     f0e:	f04f 0200 	mov.w	r2, #0

00000f12 <zero_loop>:
     f12:	4288      	cmp	r0, r1
     f14:	bfb8      	it	lt
     f16:	f840 2b04 	strlt.w	r2, [r0], #4
     f1a:	f6ff affa 	blt.w	f12 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     f1e:	f7ff f94d 	bl	1bc <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     f22:	be00      	bkpt	0x0000
     f24:	e000ed08 	.word	0xe000ed08
     f28:	00000000 	.word	0x00000000
     f2c:	000013fc 	.word	0x000013fc
     f30:	10000200 	.word	0x10000200
     f34:	10000214 	.word	0x10000214
     f38:	10000214 	.word	0x10000214
     f3c:	1000031c 	.word	0x1000031c

00000f40 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     f40:	b480      	push	{r7}
     f42:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     f44:	e7fe      	b.n	f44 <am_nmi_isr+0x4>
     f46:	bf00      	nop

00000f48 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     f48:	b480      	push	{r7}
     f4a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     f4c:	e7fe      	b.n	f4c <am_adc_isr+0x4>
     f4e:	bf00      	nop

00000f50 <am_bsp_low_power_init>:
     f50:	b508      	push	{r3, lr}
     f52:	f000 f867 	bl	1024 <am_hal_mcuctrl_bucks_enable>
     f56:	f000 f965 	bl	1224 <am_hal_vcomp_disable>
     f5a:	2001      	movs	r0, #1
     f5c:	f000 f878 	bl	1050 <am_hal_rtc_osc_select>
     f60:	2001      	movs	r0, #1
     f62:	f000 f825 	bl	fb0 <am_hal_clkgen_osc_stop>
     f66:	2002      	movs	r0, #2
     f68:	f000 f822 	bl	fb0 <am_hal_clkgen_osc_stop>
     f6c:	f000 f87e 	bl	106c <am_hal_rtc_osc_disable>
     f70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     f74:	f000 b84e 	b.w	1014 <am_hal_mcuctrl_bandgap_disable>

00000f78 <am_hal_clkgen_sysclk_select>:
     f78:	4b05      	ldr	r3, [pc, #20]	; (f90 <am_hal_clkgen_sysclk_select+0x18>)
     f7a:	4a06      	ldr	r2, [pc, #24]	; (f94 <am_hal_clkgen_sysclk_select+0x1c>)
     f7c:	b410      	push	{r4}
     f7e:	2100      	movs	r1, #0
     f80:	2447      	movs	r4, #71	; 0x47
     f82:	601c      	str	r4, [r3, #0]
     f84:	6010      	str	r0, [r2, #0]
     f86:	f85d 4b04 	ldr.w	r4, [sp], #4
     f8a:	6019      	str	r1, [r3, #0]
     f8c:	4770      	bx	lr
     f8e:	bf00      	nop
     f90:	40004014 	.word	0x40004014
     f94:	40004018 	.word	0x40004018

00000f98 <am_hal_clkgen_sysclk_get>:
     f98:	4a03      	ldr	r2, [pc, #12]	; (fa8 <am_hal_clkgen_sysclk_get+0x10>)
     f9a:	4b04      	ldr	r3, [pc, #16]	; (fac <am_hal_clkgen_sysclk_get+0x14>)
     f9c:	6812      	ldr	r2, [r2, #0]
     f9e:	f002 0207 	and.w	r2, r2, #7
     fa2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     fa6:	4770      	bx	lr
     fa8:	40004018 	.word	0x40004018
     fac:	000013a4 	.word	0x000013a4

00000fb0 <am_hal_clkgen_osc_stop>:
     fb0:	4b02      	ldr	r3, [pc, #8]	; (fbc <am_hal_clkgen_osc_stop+0xc>)
     fb2:	681a      	ldr	r2, [r3, #0]
     fb4:	4310      	orrs	r0, r2
     fb6:	6018      	str	r0, [r3, #0]
     fb8:	4770      	bx	lr
     fba:	bf00      	nop
     fbc:	4000400c 	.word	0x4000400c

00000fc0 <am_hal_mcuctrl_device_info_get>:
     fc0:	4b0e      	ldr	r3, [pc, #56]	; (ffc <am_hal_mcuctrl_device_info_get+0x3c>)
     fc2:	4a0f      	ldr	r2, [pc, #60]	; (1000 <am_hal_mcuctrl_device_info_get+0x40>)
     fc4:	490f      	ldr	r1, [pc, #60]	; (1004 <am_hal_mcuctrl_device_info_get+0x44>)
     fc6:	b4f0      	push	{r4, r5, r6, r7}
     fc8:	681f      	ldr	r7, [r3, #0]
     fca:	6007      	str	r7, [r0, #0]
     fcc:	6812      	ldr	r2, [r2, #0]
     fce:	4e0e      	ldr	r6, [pc, #56]	; (1008 <am_hal_mcuctrl_device_info_get+0x48>)
     fd0:	6042      	str	r2, [r0, #4]
     fd2:	6832      	ldr	r2, [r6, #0]
     fd4:	4d0d      	ldr	r5, [pc, #52]	; (100c <am_hal_mcuctrl_device_info_get+0x4c>)
     fd6:	6082      	str	r2, [r0, #8]
     fd8:	682a      	ldr	r2, [r5, #0]
     fda:	60c2      	str	r2, [r0, #12]
     fdc:	681a      	ldr	r2, [r3, #0]
     fde:	4c0c      	ldr	r4, [pc, #48]	; (1010 <am_hal_mcuctrl_device_info_get+0x50>)
     fe0:	f3c2 5203 	ubfx	r2, r2, #20, #4
     fe4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
     fe8:	6102      	str	r2, [r0, #16]
     fea:	681b      	ldr	r3, [r3, #0]
     fec:	f3c3 4303 	ubfx	r3, r3, #16, #4
     ff0:	bcf0      	pop	{r4, r5, r6, r7}
     ff2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     ff6:	6143      	str	r3, [r0, #20]
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop
     ffc:	40020000 	.word	0x40020000
    1000:	40020004 	.word	0x40020004
    1004:	000013e0 	.word	0x000013e0
    1008:	40020008 	.word	0x40020008
    100c:	4002000c 	.word	0x4002000c
    1010:	000013c4 	.word	0x000013c4

00001014 <am_hal_mcuctrl_bandgap_disable>:
    1014:	4b02      	ldr	r3, [pc, #8]	; (1020 <am_hal_mcuctrl_bandgap_disable+0xc>)
    1016:	f06f 0201 	mvn.w	r2, #1
    101a:	601a      	str	r2, [r3, #0]
    101c:	4770      	bx	lr
    101e:	bf00      	nop
    1020:	400200fc 	.word	0x400200fc

00001024 <am_hal_mcuctrl_bucks_enable>:
    1024:	4b08      	ldr	r3, [pc, #32]	; (1048 <am_hal_mcuctrl_bucks_enable+0x24>)
    1026:	4a09      	ldr	r2, [pc, #36]	; (104c <am_hal_mcuctrl_bucks_enable+0x28>)
    1028:	6819      	ldr	r1, [r3, #0]
    102a:	f041 0102 	orr.w	r1, r1, #2
    102e:	6019      	str	r1, [r3, #0]
    1030:	6819      	ldr	r1, [r3, #0]
    1032:	f041 0101 	orr.w	r1, r1, #1
    1036:	6019      	str	r1, [r3, #0]
    1038:	6813      	ldr	r3, [r2, #0]
    103a:	0799      	lsls	r1, r3, #30
    103c:	d5fc      	bpl.n	1038 <am_hal_mcuctrl_bucks_enable+0x14>
    103e:	4a03      	ldr	r2, [pc, #12]	; (104c <am_hal_mcuctrl_bucks_enable+0x28>)
    1040:	6813      	ldr	r3, [r2, #0]
    1042:	07db      	lsls	r3, r3, #31
    1044:	d5fc      	bpl.n	1040 <am_hal_mcuctrl_bucks_enable+0x1c>
    1046:	4770      	bx	lr
    1048:	40020010 	.word	0x40020010
    104c:	40020014 	.word	0x40020014

00001050 <am_hal_rtc_osc_select>:
    1050:	4b05      	ldr	r3, [pc, #20]	; (1068 <am_hal_rtc_osc_select+0x18>)
    1052:	681a      	ldr	r2, [r3, #0]
    1054:	b918      	cbnz	r0, 105e <am_hal_rtc_osc_select+0xe>
    1056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    105a:	601a      	str	r2, [r3, #0]
    105c:	4770      	bx	lr
    105e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1062:	601a      	str	r2, [r3, #0]
    1064:	4770      	bx	lr
    1066:	bf00      	nop
    1068:	4000400c 	.word	0x4000400c

0000106c <am_hal_rtc_osc_disable>:
    106c:	4b02      	ldr	r3, [pc, #8]	; (1078 <am_hal_rtc_osc_disable+0xc>)
    106e:	681a      	ldr	r2, [r3, #0]
    1070:	f042 0210 	orr.w	r2, r2, #16
    1074:	601a      	str	r2, [r3, #0]
    1076:	4770      	bx	lr
    1078:	40004050 	.word	0x40004050

0000107c <am_hal_sysctrl_sleep>:
    107c:	b158      	cbz	r0, 1096 <am_hal_sysctrl_sleep+0x1a>
    107e:	4b0a      	ldr	r3, [pc, #40]	; (10a8 <am_hal_sysctrl_sleep+0x2c>)
    1080:	681b      	ldr	r3, [r3, #0]
    1082:	f033 0201 	bics.w	r2, r3, #1
    1086:	4b09      	ldr	r3, [pc, #36]	; (10ac <am_hal_sysctrl_sleep+0x30>)
    1088:	681a      	ldr	r2, [r3, #0]
    108a:	d007      	beq.n	109c <am_hal_sysctrl_sleep+0x20>
    108c:	f022 0204 	bic.w	r2, r2, #4
    1090:	601a      	str	r2, [r3, #0]
    1092:	bf30      	wfi
    1094:	4770      	bx	lr
    1096:	4b05      	ldr	r3, [pc, #20]	; (10ac <am_hal_sysctrl_sleep+0x30>)
    1098:	681a      	ldr	r2, [r3, #0]
    109a:	e7f7      	b.n	108c <am_hal_sysctrl_sleep+0x10>
    109c:	f042 0204 	orr.w	r2, r2, #4
    10a0:	601a      	str	r2, [r3, #0]
    10a2:	bf30      	wfi
    10a4:	4770      	bx	lr
    10a6:	bf00      	nop
    10a8:	40020250 	.word	0x40020250
    10ac:	e000ed10 	.word	0xe000ed10

000010b0 <am_hal_uart_config>:
    10b0:	b570      	push	{r4, r5, r6, lr}
    10b2:	6805      	ldr	r5, [r0, #0]
    10b4:	4604      	mov	r4, r0
    10b6:	f7ff ff6f 	bl	f98 <am_hal_clkgen_sysclk_get>
    10ba:	012b      	lsls	r3, r5, #4
    10bc:	fbb0 f1f3 	udiv	r1, r0, r3
    10c0:	b319      	cbz	r1, 110a <am_hal_uart_config+0x5a>
    10c2:	0180      	lsls	r0, r0, #6
    10c4:	fbb0 f3f3 	udiv	r3, r0, r3
    10c8:	018a      	lsls	r2, r1, #6
    10ca:	4810      	ldr	r0, [pc, #64]	; (110c <am_hal_uart_config+0x5c>)
    10cc:	4d10      	ldr	r5, [pc, #64]	; (1110 <am_hal_uart_config+0x60>)
    10ce:	6001      	str	r1, [r0, #0]
    10d0:	1a9a      	subs	r2, r3, r2
    10d2:	eb63 0303 	sbc.w	r3, r3, r3
    10d6:	6001      	str	r1, [r0, #0]
    10d8:	602a      	str	r2, [r5, #0]
    10da:	490e      	ldr	r1, [pc, #56]	; (1114 <am_hal_uart_config+0x64>)
    10dc:	68e2      	ldr	r2, [r4, #12]
    10de:	6860      	ldr	r0, [r4, #4]
    10e0:	7a26      	ldrb	r6, [r4, #8]
    10e2:	680d      	ldr	r5, [r1, #0]
    10e4:	4b0c      	ldr	r3, [pc, #48]	; (1118 <am_hal_uart_config+0x68>)
    10e6:	4310      	orrs	r0, r2
    10e8:	2e00      	cmp	r6, #0
    10ea:	ea40 0005 	orr.w	r0, r0, r5
    10ee:	bf0c      	ite	eq
    10f0:	2200      	moveq	r2, #0
    10f2:	2208      	movne	r2, #8
    10f4:	4302      	orrs	r2, r0
    10f6:	600a      	str	r2, [r1, #0]
    10f8:	6819      	ldr	r1, [r3, #0]
    10fa:	6922      	ldr	r2, [r4, #16]
    10fc:	430a      	orrs	r2, r1
    10fe:	601a      	str	r2, [r3, #0]
    1100:	681a      	ldr	r2, [r3, #0]
    1102:	f042 0210 	orr.w	r2, r2, #16
    1106:	601a      	str	r2, [r3, #0]
    1108:	bd70      	pop	{r4, r5, r6, pc}
    110a:	e7fe      	b.n	110a <am_hal_uart_config+0x5a>
    110c:	4001c024 	.word	0x4001c024
    1110:	4001c028 	.word	0x4001c028
    1114:	4001c02c 	.word	0x4001c02c
    1118:	4001c030 	.word	0x4001c030

0000111c <am_hal_uart_int_clear>:
    111c:	4b01      	ldr	r3, [pc, #4]	; (1124 <am_hal_uart_int_clear+0x8>)
    111e:	6018      	str	r0, [r3, #0]
    1120:	4770      	bx	lr
    1122:	bf00      	nop
    1124:	4001c044 	.word	0x4001c044

00001128 <am_hal_uart_enable>:
    1128:	4a03      	ldr	r2, [pc, #12]	; (1138 <am_hal_uart_enable+0x10>)
    112a:	6813      	ldr	r3, [r2, #0]
    112c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    1130:	f043 0301 	orr.w	r3, r3, #1
    1134:	6013      	str	r3, [r2, #0]
    1136:	4770      	bx	lr
    1138:	4001c030 	.word	0x4001c030

0000113c <am_hal_uart_disable>:
    113c:	4a03      	ldr	r2, [pc, #12]	; (114c <am_hal_uart_disable+0x10>)
    113e:	6813      	ldr	r3, [r2, #0]
    1140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    1144:	f023 0301 	bic.w	r3, r3, #1
    1148:	6013      	str	r3, [r2, #0]
    114a:	4770      	bx	lr
    114c:	4001c030 	.word	0x4001c030

00001150 <am_hal_uart_clock_enable>:
    1150:	4a07      	ldr	r2, [pc, #28]	; (1170 <am_hal_uart_clock_enable+0x20>)
    1152:	4b08      	ldr	r3, [pc, #32]	; (1174 <am_hal_uart_clock_enable+0x24>)
    1154:	6811      	ldr	r1, [r2, #0]
    1156:	f041 0101 	orr.w	r1, r1, #1
    115a:	6011      	str	r1, [r2, #0]
    115c:	681a      	ldr	r2, [r3, #0]
    115e:	f042 0208 	orr.w	r2, r2, #8
    1162:	601a      	str	r2, [r3, #0]
    1164:	681a      	ldr	r2, [r3, #0]
    1166:	f042 0210 	orr.w	r2, r2, #16
    116a:	601a      	str	r2, [r3, #0]
    116c:	4770      	bx	lr
    116e:	bf00      	nop
    1170:	4000402c 	.word	0x4000402c
    1174:	4001c030 	.word	0x4001c030

00001178 <am_hal_uart_clock_disable>:
    1178:	4a05      	ldr	r2, [pc, #20]	; (1190 <am_hal_uart_clock_disable+0x18>)
    117a:	4b06      	ldr	r3, [pc, #24]	; (1194 <am_hal_uart_clock_disable+0x1c>)
    117c:	6811      	ldr	r1, [r2, #0]
    117e:	f021 0108 	bic.w	r1, r1, #8
    1182:	6011      	str	r1, [r2, #0]
    1184:	681a      	ldr	r2, [r3, #0]
    1186:	f022 0201 	bic.w	r2, r2, #1
    118a:	601a      	str	r2, [r3, #0]
    118c:	4770      	bx	lr
    118e:	bf00      	nop
    1190:	4001c030 	.word	0x4001c030
    1194:	4000402c 	.word	0x4000402c

00001198 <am_hal_uart_fifo_config>:
    1198:	4b03      	ldr	r3, [pc, #12]	; (11a8 <am_hal_uart_fifo_config+0x10>)
    119a:	4a04      	ldr	r2, [pc, #16]	; (11ac <am_hal_uart_fifo_config+0x14>)
    119c:	6819      	ldr	r1, [r3, #0]
    119e:	f041 0110 	orr.w	r1, r1, #16
    11a2:	6019      	str	r1, [r3, #0]
    11a4:	6010      	str	r0, [r2, #0]
    11a6:	4770      	bx	lr
    11a8:	4001c02c 	.word	0x4001c02c
    11ac:	4001c034 	.word	0x4001c034

000011b0 <am_hal_uart_flags_get>:
    11b0:	4b01      	ldr	r3, [pc, #4]	; (11b8 <am_hal_uart_flags_get+0x8>)
    11b2:	6818      	ldr	r0, [r3, #0]
    11b4:	4770      	bx	lr
    11b6:	bf00      	nop
    11b8:	4001c018 	.word	0x4001c018

000011bc <am_hal_uart_string_transmit_polled>:
    11bc:	7801      	ldrb	r1, [r0, #0]
    11be:	b410      	push	{r4}
    11c0:	b149      	cbz	r1, 11d6 <am_hal_uart_string_transmit_polled+0x1a>
    11c2:	4a06      	ldr	r2, [pc, #24]	; (11dc <am_hal_uart_string_transmit_polled+0x20>)
    11c4:	4c06      	ldr	r4, [pc, #24]	; (11e0 <am_hal_uart_string_transmit_polled+0x24>)
    11c6:	6813      	ldr	r3, [r2, #0]
    11c8:	069b      	lsls	r3, r3, #26
    11ca:	d4fc      	bmi.n	11c6 <am_hal_uart_string_transmit_polled+0xa>
    11cc:	6021      	str	r1, [r4, #0]
    11ce:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    11d2:	2900      	cmp	r1, #0
    11d4:	d1f7      	bne.n	11c6 <am_hal_uart_string_transmit_polled+0xa>
    11d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    11da:	4770      	bx	lr
    11dc:	4001c018 	.word	0x4001c018
    11e0:	4001c000 	.word	0x4001c000

000011e4 <am_hal_uart_line_receive_polled>:
    11e4:	3801      	subs	r0, #1
    11e6:	b410      	push	{r4}
    11e8:	d00f      	beq.n	120a <am_hal_uart_line_receive_polled+0x26>
    11ea:	4a0c      	ldr	r2, [pc, #48]	; (121c <am_hal_uart_line_receive_polled+0x38>)
    11ec:	4c0c      	ldr	r4, [pc, #48]	; (1220 <am_hal_uart_line_receive_polled+0x3c>)
    11ee:	4408      	add	r0, r1
    11f0:	6813      	ldr	r3, [r2, #0]
    11f2:	06db      	lsls	r3, r3, #27
    11f4:	d4fc      	bmi.n	11f0 <am_hal_uart_line_receive_polled+0xc>
    11f6:	6823      	ldr	r3, [r4, #0]
    11f8:	b2db      	uxtb	r3, r3
    11fa:	2b0a      	cmp	r3, #10
    11fc:	d008      	beq.n	1210 <am_hal_uart_line_receive_polled+0x2c>
    11fe:	2b0d      	cmp	r3, #13
    1200:	d006      	beq.n	1210 <am_hal_uart_line_receive_polled+0x2c>
    1202:	f801 3b01 	strb.w	r3, [r1], #1
    1206:	4281      	cmp	r1, r0
    1208:	d1f2      	bne.n	11f0 <am_hal_uart_line_receive_polled+0xc>
    120a:	f85d 4b04 	ldr.w	r4, [sp], #4
    120e:	4770      	bx	lr
    1210:	2300      	movs	r3, #0
    1212:	700b      	strb	r3, [r1, #0]
    1214:	f85d 4b04 	ldr.w	r4, [sp], #4
    1218:	4770      	bx	lr
    121a:	bf00      	nop
    121c:	4001c018 	.word	0x4001c018
    1220:	4001c000 	.word	0x4001c000

00001224 <am_hal_vcomp_disable>:
    1224:	4b01      	ldr	r3, [pc, #4]	; (122c <am_hal_vcomp_disable+0x8>)
    1226:	2237      	movs	r2, #55	; 0x37
    1228:	601a      	str	r2, [r3, #0]
    122a:	4770      	bx	lr
    122c:	4000c008 	.word	0x4000c008

00001230 <__aeabi_d2f>:
    1230:	ea4f 0241 	mov.w	r2, r1, lsl #1
    1234:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    1238:	bf24      	itt	cs
    123a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    123e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    1242:	d90d      	bls.n	1260 <__aeabi_d2f+0x30>
    1244:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    1248:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    124c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    1250:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    1254:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    1258:	bf08      	it	eq
    125a:	f020 0001 	biceq.w	r0, r0, #1
    125e:	4770      	bx	lr
    1260:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    1264:	d121      	bne.n	12aa <__aeabi_d2f+0x7a>
    1266:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    126a:	bfbc      	itt	lt
    126c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    1270:	4770      	bxlt	lr
    1272:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1276:	ea4f 5252 	mov.w	r2, r2, lsr #21
    127a:	f1c2 0218 	rsb	r2, r2, #24
    127e:	f1c2 0c20 	rsb	ip, r2, #32
    1282:	fa10 f30c 	lsls.w	r3, r0, ip
    1286:	fa20 f002 	lsr.w	r0, r0, r2
    128a:	bf18      	it	ne
    128c:	f040 0001 	orrne.w	r0, r0, #1
    1290:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1294:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    1298:	fa03 fc0c 	lsl.w	ip, r3, ip
    129c:	ea40 000c 	orr.w	r0, r0, ip
    12a0:	fa23 f302 	lsr.w	r3, r3, r2
    12a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    12a8:	e7cc      	b.n	1244 <__aeabi_d2f+0x14>
    12aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
    12ae:	d107      	bne.n	12c0 <__aeabi_d2f+0x90>
    12b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    12b4:	bf1e      	ittt	ne
    12b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    12ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    12be:	4770      	bxne	lr
    12c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    12c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    12c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    12cc:	4770      	bx	lr
    12ce:	bf00      	nop
    12d0:	3a6c6156 	.word	0x3a6c6156
    12d4:	0a632520 	.word	0x0a632520
    12d8:	00000000 	.word	0x00000000
    12dc:	6c6c6548 	.word	0x6c6c6548
    12e0:	6f57206f 	.word	0x6f57206f
    12e4:	20646c72 	.word	0x20646c72
    12e8:	54524155 	.word	0x54524155
    12ec:	000a0a21 	.word	0x000a0a21
    12f0:	69766544 	.word	0x69766544
    12f4:	49206563 	.word	0x49206563
    12f8:	3a6f666e 	.word	0x3a6f666e
    12fc:	6150090a 	.word	0x6150090a
    1300:	6e207472 	.word	0x6e207472
    1304:	65626d75 	.word	0x65626d75
    1308:	30203a72 	.word	0x30203a72
    130c:	38302578 	.word	0x38302578
    1310:	52090a58 	.word	0x52090a58
    1314:	73697665 	.word	0x73697665
    1318:	3a6e6f69 	.word	0x3a6e6f69
    131c:	25783020 	.word	0x25783020
    1320:	00000a58 	.word	0x00000a58
    1324:	616c4609 	.word	0x616c4609
    1328:	73206873 	.word	0x73206873
    132c:	20657a69 	.word	0x20657a69
    1330:	6425203d 	.word	0x6425203d
    1334:	0000000a 	.word	0x0000000a
    1338:	41525309 	.word	0x41525309
    133c:	6973204d 	.word	0x6973204d
    1340:	3d20657a 	.word	0x3d20657a
    1344:	0a642520 	.word	0x0a642520
    1348:	0000000a 	.word	0x0000000a
    134c:	706d6f43 	.word	0x706d6f43
    1350:	72656c69 	.word	0x72656c69
    1354:	7325203a 	.word	0x7325203a
    1358:	0000000a 	.word	0x0000000a
    135c:	20434347 	.word	0x20434347
    1360:	2e382e34 	.word	0x2e382e34
    1364:	30322033 	.word	0x30322033
    1368:	32303431 	.word	0x32303431
    136c:	28203832 	.word	0x28203832
    1370:	656c6572 	.word	0x656c6572
    1374:	29657361 	.word	0x29657361
    1378:	52415b20 	.word	0x52415b20
    137c:	6d652f4d 	.word	0x6d652f4d
    1380:	64646562 	.word	0x64646562
    1384:	342d6465 	.word	0x342d6465
    1388:	622d385f 	.word	0x622d385f
    138c:	636e6172 	.word	0x636e6172
    1390:	65722068 	.word	0x65722068
    1394:	69736976 	.word	0x69736976
    1398:	32206e6f 	.word	0x32206e6f
    139c:	32333830 	.word	0x32333830
    13a0:	00005d32 	.word	0x00005d32

000013a4 <CSWTCH.2>:
    13a4:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    13b4:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.

000013c4 <am_hal_mcuctrl_flash_size>:
    13c4:	00008000 00010000 00020000 00040000     ................
    13d4:	00080000 00100000 00200000              .......... .

000013e0 <am_hal_mcuctrl_sram_size>:
    13e0:	00008000 00010000 00020000 00040000     ................
    13f0:	00080000 00100000 00200000              .......... .
